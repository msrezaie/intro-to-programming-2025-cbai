{
  "id": "68f7ef47d68ee1a7419c646d",
  "title": "Intro To Programming 2025",
  "description": "No description available",
  "learningObjectives": [
    "No learning objectives"
  ],
  "finalProjectDetails": {
    "overview": "No final project specified.",
    "planningResources": [],
    "requirements": [
      "No requirements specified."
    ],
    "submissionInstructions": "No submission instructions provided."
  },
  "createdBy": {
    "name": "Mo S Rezaie",
    "githubUsername": "msrezaie"
  },
  "contributors": [],
  "status": "pending",
  "originalGithubUrl": "https://github.com/Code-the-Dream-School/intro-to-programming-2025",
  "remoteGithubUrl": "https://github.com/msrezaie/intro-to-programming-2025-cbai",
  "createdAt": "2025-10-21T20:38:31.658Z",
  "updatedAt": "2025-10-21T20:38:56.455Z",
  "lessonCount": 15,
  "lessonMetadata": [
    {
      "id": "68f7ef51d68ee1a7419c648d",
      "lessonNumber": 1,
      "title": "## Scrimba",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 1",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "**NOTE: If the CodeSandbox file gets updated, the code example below may not be up to date.  You can confirm the most recent version of this assignment by clicking this:**\n[Link to CodeSandbox Assignment](https://codesandbox.io/p/sandbox/lesson-1-javascript-basics-and-functions-2025-nrfx4t?file=%2Fsrc%2Findex.mjs)\n\n``` javascript\n//--------------- IMPORTANT!!! ---------------\n\n// Use the keyboard shortcut Alt + Z (for PC) or Option + Z (for Mac) to allow word wrap on this document.  Word wrap breaks the lines so you don't have to keep scrolling left and right to read.\n\n//READ THE INFORMATION IN THE BROWSER WINDOW PANEL ON THE RIGHT BEFORE BEGINNING YOUR ASSIGNMENT!!\n\n//---------- OVERVIEW AND INSTRUCTIONS ----------\n\n//----------------------------------\n// LESSON 1 BASICS AND FUNCTIONS\n//----------------------------------\n\n// This is the coding assigment for the first week of the Intro to Programming course from\n// Code the Dream. The concepts touched on in this assignment include:\n//   - The basic syntax of the JavaScript programming language\n//   - Basic programming concepts like variables, data types, and conditional statements\n//   - Troubleshooting programming problems\n//   - Encapsulating code with Functions\n//   - Passing Information Into Functions\n\n// In this assignment you will write your own code. Your instructions are listed as \"comments\", meaning the instructions are grayed out and start with '//' at the beginning of the line of code. Put your answers immediately below the instructions for each question. As mentioned in the Welcome to Class info in the browser on the right, the first few questions have console logs provided. They are currently commented out so they will not show errors in your console.  Please remove the '//' from the left of the console log to \"comment them in\" making them active code.  Add console logs for all the remaining questions to check your code output. There are sample console logs for all questions, but be sure to use some of your own values and function inputs as well.\n\n// To use a function in a console.log you invoke/call the function as part of the console log like this:\n//  console.log(\"Q#: \", functionName(anyInput))\n\n// Please be sure to check the output of your called functions and console logs in the Console tab to the bottom right of this screen. If your Console is not showing, click the Inspect Button in the top right (see the Welcome to class information to the right if you need help finding that)  Check to make sure that the output you get in your Console is the expected output.\n\n// *********\n// NOTE: THE CONSOLE WILL UPDATE AS YOU TYPE!  LOOK AT THE MOST RECENT OUTPUT TO MAKE SURE YOUR CONSOLE LOGS ARE DISPLAYING WHAT YOU EXPECT!!\n// *********\n\n// ---------- QUESTION 1 ----------\n// Declaring and giving string values to variables.\n// Create three variables.  First let's make sure we're using \"camel case\" where all letters are lowercase except for the first letter of words that are in the middle.  This is the accepted standard for Javascript code.  Your first variable should be titled \"firstName\" with the value of your first name as a string.  Your second variable should be titled \"lastName\" with the value of your last name as a string.  The last variable should be titled \"country\" with the value of the name of the country where you were born as a string.\n\n//PUT YOUR CODE HERE\n\n// console.log(\"Q1: My first name is: \", firstName);\n// console.log(\"Q1: My last name is: \", lastName);\n// console.log(\"Q1: I was born in the country: \", country);\n\n// ---------- QUESTION 2 ----------\n// Declaring and giving numerical values to variables.\n// Create four variables.  One titled \"floatingPoint\" with the value of any floating point number you choose.  One titled \"integer\" with the value of any integer number you choose.  One titled \"negative\" with the value of any negative number you choose.  One titled \"notANumber\" with the value of 4 multipled by a string of your choice.\n//NOTE: Remember from your lessons that JavaScript can treat large numbers differently than you might expect.\n\n//STRETCH GOAL: You'll see \"Stretch Goal\"s throughout the course. Stretch Goals are optional, but are encouraged as they help you try your hand at something a little more advanced for the week/assignment/question. Create a fifth variable titled \"bigNumber\" that is 16 or more numbers long. Then write your console.log and see what happens as you play and practice working with large numbers.\n\n// PUT YOUR CODE HERE\n\n// console.log(\n//   \"This is a decimal, also called a floating point number: \",\n//   floatingPoint\n// );\n// console.log(\"Q2: This is a whole number, also called an integer: \", integer);\n// console.log(\"Q2: This is a negative number: \", negative);\n// console.log(\"Q2: You can't mulitply 4 by a word! \", notANumber);\n\n// ---------- Question 3 ----------\n// Declaring and giving boolean values to variables.\n// Create two variables.  Name the first variable anything you want and give it the value of true.  Name the second variable a different name than the first and give it the value of false.\n\n// PUT YOUR CODE HERE\n\n// console.log(\"The variable I made true is: \");\n//The output of the above should be true.\n// console.log(\"The variable I made false is: \");\n//The output of the above should be false.\n\n// ---------- QUESTION 4 ----------\n// String Concatenation\n// Create a variable that makes a concatenated string out of the variables you made in Question 1. Be sure you're using your Q1 variables and not making new ones.\n// Suggested text: Hello! My name is (your first name variable and last name variable concatenated here) and I was born in (your country variable here)\n// You can also choose to make the text between the variables strings and concatenate all of them together.\n\n// STRETCH GOAL: For this stretch goal, make a second variable that still concatenates your variable from Q1, but uses template literals.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 5 ----------\n// Make two variables.  One will hold the addition of your your floating point and integer variables from Q2, the other should hold the addition of your integer and negative number from Q2.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 6 ----------\n// String Methods\n// Create four variables named \"length\", \"firstInitial\", \"lastInitial\", and \"capitalize\".  Using string methods, assign the length of your first name (use your variable from Q1) to the \"length\" variable. Assign the first letter of your first name (use your variable from Q1) to the \"firstInitial\" variable.  Assign the LAST letter of your first name (use your variable from Q1) to the \"lastInitial\" variable.  Change your first name to all capital letters and assign it to the \"capitalize\" variable.\n\n//STRETCH GOAL: Create a variable called \"weirdInitials\". Using string methods, have weirdInitials result in the value of the LAST letters of any first and last names and should be capitalized.  Example: \"Sally Smith\"'s weird initials should be \"YH\" and \"Jose Rodriguez\"'s inititals should be \"EZ\"\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 7 ----------\n// Declare a variable named \"answer7\".  Then create a conditional if else statement that will assign the value of true to the answer7 variable if your integer from Q2 is greater than 10 and assign it false if it is not.\n\n// STRETCH GOAL: Make an if / else if / else statement that assigns answer7 the value of \"less than\" if your integer from Q2 is less than 10, \"equal to\" if it's equal, and \"greater than\" if it's greater.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 8 ----------\n// Declare a variable called \"age\" and assign it that value of your age in years.  Create a conditional statement that will console.log the phrase \"Age is just a number!\" if your age is less than or equal to 30 and \"Young at heart!\" if your age is greater than 30.\n\n//STRETCH GOAL: Combine your skills!  Use template literals to console.log your name in the phrase as in \"Sally, age is just a number!\" or \"Jose, you're young at heart!\"\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 9 ----------\n// Create a variable \"randomNum\" to be a random number generator that randomly returns either the number 1, 2, or 3 (you can use this resource to help you solve how to do this part: https://www.w3schools.com/js/js_random.asp). Now let's make a \"Magic 8 Ball\" using if elseif else that returns a different phrase for each of the three possible numbers.\n// If your random number is 1, console.log the phrase \"It is certain.\".\n// If it is 2, console.log \"Perhaps.\".\n// If it is 3, console.log \"Absolutely not.\".\n\n// STRETCH GOAL: Complete Q9 using a switch statement instead of if elseif else.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 10 ----------\n// Declare a variable named \"exampleNum\".  Give it the value of a floating point number with 4 decimal places.  Using a Number method round it to the nearest two decimal place. Example if the number is 21.4572, exampleNum should become 21.46.\n\n// STRETCH GOAL: Achieve the same results as Q10 using Math methods instead of Number methods. HINT: you may need to alter the variable over a series of calculations/method uses.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 11 ----------\n// Declare two variables named \"stringNum\" and \"mathNum\".  Assign stringNum a STRING of numbers and mathNUM numbers.  Create a third variable named \"answer11\" and have it multiply stringNum and mathNum.  Remember to convert your string in order for it to properly calculate!\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 12 ----------\n//Create a function titled 'messageString'.  Inside the function,  declare a variable named 'message' and assign it the string \"Welcome to Code the Dream\".  Return the 'message' variable.\n\n// EXAMPLE LOG:\n//    console.log(\"Q12: \", messageString());\n// EXAMPLE OUTPUT:\n//    Q12: Welcome to Code the Dream!\n\n//PUT YOUR CODE HERE\n\n// ---------- QUESTION 13 ----------\n// Create a function called 'combineStrings'.  Inside the function, declare two variables named 'string1' and 'string2'.  Assign them the strings 'Good' and 'Evening' respecitvely.  Return the two strings concatenated with a space in between.\n\n// EXAMPLE LOG:\n//    console.log(\"Q13: \", combineStrings());\n// EXAMPLE OUTPUT:\n//    Q13: Good Evening\n\n//PUT YOUR CODE HERE\n\n// ---------- QUESTION 14 ----------\n// Let's start working with parameters.  Create a function called 'useParams' that takes one parameter and returns that parameter with the all letters capitalized.\n\n// EXAMPLE LOG:\n//    console.log(\"Q14: \", useParams(\"hello\"));\n// EXAMPLE OUTPUT:\n//    Q14 HELLO\n\n//PUT YOUR CODE HERE\n\n// ---------- QUESTION 15 ----------\n// Now let's work with strings... Create two variables named 'word1' and 'word2' and assign them any strings you want.  Then create a function called 'biggestStringLength' that takes word1 and word2 as parameters and returns the length of the longer string. If they are of equal length, just return that length.  Stretch your skills by making an empty string and seeing what happens in that situation.\n\n// EXAMPLE LOG:\n//    console.log(\"Q15: \", biggestStringLength(word1, word2));\n// EXAMPLE OUTPUT: (if your word1 was 'Code' and word2 was 'Dream')\n//    Q15: 5\n\n// PUT YOUR CODE HERE\n\n```",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c6494"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "Students have access to **[V2 Scrimba - Courses](https://v2.scrimba.com/courses)** and all of their courses _(be sure you have used the link emailed to you to gain access; you will need to login to Scrimba with the email account you provided to us as the way to contact you)_. Scrimba is an interactive learning platform where students can interact with the video content code editor.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c648e"
        },
        {
          "subsectionOrder": 2,
          "title": "Scrimba",
          "content": "The interface probably will look a little different than other video-based learning tools (e.g. Treehouse, Udemy, Khan Academy, etc.). Once logged in you can access the course library from the **Courses** link in the menu. \n\n![V2 Course Menu](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/51661360-440d-487e-b4f3-33fe6f62c5ce.png)\n\nThe Scrimba Courses Library page will show all courses and you can filter by Topic and choose the course you want to look at. Each week, there will be links to specific course lesson material that will cover the topics for that week.\n\n![V2 Scrimba Courses Library](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/e30aa729-d50f-4c44-97af-fec8c0798233.png)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c648f"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Lesson Interface",
          "content": "In order to see a particular course’s lesson content you have to first “enroll” in the course. This involves clicking a start button.\n\n![V2 Start Course](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/8eaffff2-5e24-4d28-833b-0f900fed508b.png)\n\nAfterward, a course menu will allow you to navigate to each lesson\n\n![V2 Course Menu](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/2403599b-9b8a-4677-9afe-b5a86823335b.png)\n\nYou click the name of the section you're on in the bottom left to go back to the course menu.\n\n![V2 Return to Course Menu](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/40a4b58c-0bb0-444b-85f2-15e788c8e59d.png)\n\n\n## You can _either_ use the written Odin Project lessons _or_ the video lessons in Scrimba. You can do both if you have them time and want to, but using just one or the other will teach what is needed to complete the coding assignments.\nFor the Odin Project, Go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6490"
        },
        {
          "subsectionOrder": 4,
          "title": "Odin Project",
          "content": "- [Problem-Solving](https://github.com/Code-the-Dream-School/intro-to-programming-2025/wiki/Problem-Solving)\n- [The Odin Project – Fundamentals Part 1](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/fundamentals-part-1)\n- [The Odin Project – Fundamentals Part 2](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/fundamentals-part-2)\n- [The Odin Project – Fundamentals Part 3](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/fundamentals-part-3)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6491"
        },
        {
          "subsectionOrder": 5,
          "title": "Scrimba",
          "content": "- [V2 Scrimba - JS Deep Dive - Variables and Strings](https://v2.scrimba.com/javascript-deep-dive-c0a/~04)\n- [V2 Scrimba - JS Deep Dive - Types & Conditionals](https://v2.scrimba.com/javascript-deep-dive-c0a/~0g)\n- [V2 Scrimba - JS Deep Dive - Functions](https://v2.scrimba.com/javascript-deep-dive-c0a/~0q)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6492"
        },
        {
          "subsectionOrder": 6,
          "title": "JavaScript Info on Date and Time - read this content in addition to either Odin or Scrimba",
          "content": "- [JavaScript.info – Working with Dates and Times](https://javascript.info/date)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6493"
        }
      ]
    },
    {
      "id": "68f7ef51d68ee1a7419c6496",
      "lessonNumber": 2,
      "title": "Loops",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 2",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "**NOTE: If the CodeSandbox file gets updated, the code example below may not be up to date.  You can confirm the most recent version of this assignment by clicking this:**\n[Link to CodeSandbox Assignment](https://codesandbox.io/p/sandbox/lesson-2-javascript-loops-and-arrays-2025-wzp3tj?file=%2Fsrc%2Findex.mjs)\n\n``` javascript\n//--------------- IMPORTANT!!! ---------------\n\n// Use the keyboard shortcut Alt + Z (for PC) or Option + Z (for Mac) to allow word wrap on this document.  Word wrap breaks the lines so you don't have to keep scrolling left and right to read.\n\n//READ THE INFORMATION IN THE BROWSER WINDOW PANEL ON THE RIGHT BEFORE BEGINNING YOUR ASSIGNMENT!!\n\n//---------- OVERVIEW AND INSTRUCTIONS ----------\n\n//----------------------------------\n// LESSON 2 LOOPS AND ARRAYS\n//----------------------------------\n\n//# JavaScript Loops and Arrays\n// This is the coding assigment for the second week of the Intro to Programming course from Code the Dream. The concepts touched on in this assignment include:\n//   - Simplify Repetitive Tasks with Loops\n//   - Working with ‘for’ Loops\n//   - Understanding Arrays\n\n// In this assignment you will write your own code. Your instructions are listed as \"comments\", meaning the instructions are grayed out and start with '//' at the beginning of the line of code. Put your answers immediately below the instructions for each question. As mentioned in the Welcome to week 2 information to the right, you'll need to use console logs for all the questions to check your code output. Using a function in a console.log is very similar to how you were using them with variables last week. To invoke/call the function use the syntax:\n\n//  console.log(\"Q#: \", functionName(anyInput))\n\n// Please be sure to check the output of your called functions and console logs in the Console tab to the bottom right of this screen. If your Console is not showing, click the Inspect Button in the top right (see the Welcome to week 2 information to the right if you need help finding that)  Check to make sure that the output you get in your Console is the expected output.\n\n// ---------- QUESTION 1 ----------\n// Write a function called 'repeat' that takes 1 integer parameter and, using a for or while loop, prints out the string \"Hello World!\" to the console the same number of times as the parameter. NOTE: for this question, since your console log should be inside your function, you only need to call/invoke the function after you write it rather than call/invoke it inside of a console.log.\n\n// EXAMPLE \"LOG\":\n//    repeat(3);\n// EXAMPLE OUTPUT:\n//    Hello World!\n//    Hello World!\n//    Hello World!\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 2 ----------\n// Write a function called 'pyramidCounting' that takes 1 integer parameter and returns the sum of all of the numbers between 0 and the parameter.\n\n// EXAMPLE LOG:\n//    console.log(\"Q2: \", pyramidCounting(4));\n// EXAMPLE OUTPUT:\n//    Q2: 10\n// The mathematical explanation of this is 0+1+2+3+4 = 10.\n\n//PUT YOUR CODE HERE\n\n// ---------- QUESTION 3 ----------\n// Write a function called 'noVowels' that take a string parameter and removes vowels from that string using a loop.\n\n// EXAMPLE LOG:\n//    console.log(\"Q3: \", noVowels(adventurous));\n// EXAMPLE OUTPUT:\n//    Q3: dvntrs\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 4 ----------\n// Write a function called 'vowelCount' that takes 1 string parameter and returns the number of vowels in that string.\n\n// EXAMPLE LOG:\n//    console.log(\"Q4: \", vowelCount('I love to code.'));\n// EXAMPLE OUTPUT:\n//    Q4: 6\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 5 ----------\n// Write a function called 'numOfOdds' that takes 1 integer parameter and returns the number of odd numbers between 0 and that number, including the number if it's odd. (Hint: Use the modulo operator)\n\n// EXAMPLE LOG:\n//    console.log(\"Q5: \", numOfOdds(15));\n// EXAMPLE OUTPUT:\n//    Q5: 8\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 6 ----------\n// Create two variables named 'empty' and 'full'.  Assign an empty array to the 'empty' variable and any array of strings or numbers to the 'full' variable.  Write a function called 'arrayChecker' that returns true if the array passed as a parameter is empty and false if not.  Check both the 'empty' and 'full' variables to make sure they are returning the expected values.\n\n// EXAMPLE LOGS:\n//    console.log(\"Q6 empty: \", arrayChecker(empty));\n//    console.log(\"Q6 not empty: \", arrayChecker(full));\n// EXAMPLE OUTPUTS:\n//    Q6 empty: true\n//    Q6 not empty: false\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 7 ----------\n// Write a function called 'getElementAt' that takes an array parameter and an integer parameter.  The function should return the element in the array at the given number index or 'null' if it doesn't exist.  Use your 'full' variable from Question 6 to test.\n\n// EXAMPLE LOGS:\n//    console.log(\"Q7: \", getElementAt(full, 2));\n//    console.log(\"Q7: \", getElementAt(full, 7));\n// EXAMPLE OUTPUT: (if the array assigned to variable 'full' is [\"dream\", 19, \"code\", 24, 180])\n//    Q7: code\n//    Q7: null\n\n// ---------- QUESTION 8 ----------\n// Write a function called 'insertInArray' that takes an array parameter, makes a NEW array with the value '0' inserted at the second position in the NEW array.  The function should return the NEW array.  Use your 'full' variable from Question 6 to test.  NOTE: Assigning an array to a new variable does not make a copy, it's another reference to the same array.  To make a copy you can use the slice() method as in this example:\n// let newArray = originalArray.slice()\n// LEARNING MOMENT: Also console log the variable 'full' to compare the new array to the original.\n\n// EXAMPLE LOG:\n//    console.log(\"Q8: \", insertInArray(full));\n//    console.log(\"original array: \", full);\n// EXAMPLE OUTPUT: (if the array assigned to variable 'full' is [\"dream\", 19, \"code\", 24, 180])\n//    Q8: [\"dream\", 0, 19, \"code\", 24, 180]\n//    original array: [\"dream\", 19, \"code\", 24, 180]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 9 ----------\n// Write a function called 'compareArrays' that takes two Array parameters (containing numbers or strings only) and returns true if they are equal, false if not.  The purpose of this function should be to look at each element of the two arrays and compare them, returning false when they either hit two items that don't match, or returning false if the two arrays themselves are different lengths. You can test this with the 'empty' and 'full' variables from Question 6, and/or you can create a variable called 'compare' and assign it an array identical to 'full' to compare those.  To further test your function's accuracy, create a new variable called 'part' that is a partial copy of the 'full' variable and test that as well.\n\n// REMEMBER: In JavaScript, 1 === '1' is false, but 1 == '1' is true. You'll need to use the triple equals operator which is more strict because it compares data type.\n\n// EXAMPLE LOG:\n//    console.log(\"Q9 same: \", compareArrays(full, compare));\n// EXAMPLE OUTPUT: (if both arrays assigned to variable 'full' and 'compare' are [\"dream\", 19, \"code\", 24])\n//    Q9 same: true\n\n// EXAMPLE LOG:\n//    console.log(\"Q9 different: \", compareArrays(full, empty));\n// EXAMPLE OUTPUT: (if using variables from Question 6)\n//    Q9 different: false\n\n// EXAMPLE LOG:\n//    console.log(\"Q9 partial: \", compareArrays(full, part));\n// EXAMPLE OUTPUT: (if 'full' variable is [\"dream\", 19, \"code\", 24] and if 'part' variable is [\"dream\", 19, \"code\"])\n//    Q9 different: false\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 10 ----------\n// Create a variable called 'numbers' and assign it an array with at least 3 numbers as elements (example: [10, 3, 4]).  Write a function called 'calculateTotal' that takes one array parameter and loops through the array in order to return the sum of all the array elements.\n\n// STRETCH GOAL: write another version of calculateTotal (call it calculateTotal2) using the 'reduce()' method\n\n// EXAMPLE LOG:\n//    console.log(\"Q10: \", calculateTotal(numbers));\n// EXAMPLE OUTPUT: (if the array assigned to variable 'numbers' is [3, 4, 2 ,8])\n//    Q10: 17\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 11 ----------\n// Write two functions called 'findEvens' and 'findOdds' that each take one array parameter and each returns a NEW Array of all the even or odd numbers as indicated.  NOTE: Assigning an array to a new variable does not make a copy, it's another reference to the same array.  To make a copy you can use the slice() method as in this example:\n// let newArray = originalArray.slice()\n// STRETCH GOAL: write another version of findEvens or findOdds using the `filter()` method\n\n// EXAMPLE LOG:\n//    console.log(\"Q11 evens: \", findEvens([10,2,3,19,7,6,93]));\n//    console.log(\"Q11 odds: \", findOdds([10,2,3,19,7,6,93]));\n// EXAMPLE OUTPUT:\n//    Q11 evens: [10,2,6]\n//    Q11 odds: [3,19,7,93]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 12 ----------\n// Write a function called 'makeSquares' that takes one array parameter and returns a NEW Array with the squared values of each of the numbers.  NOTE: Assigning an array to a new variable does not make a copy, it's another reference to the same array.  To make a copy you can use the slice() method as in this example:\n// let newArray = originalArray.slice()\n// STRETCH GOAL: write another version makeSquares using the `map()` method\n\n// EXAMPLE LOG:\n//    console.log(\"Q12: \", makeSquares([2,5,8]));\n// EXAMPLE OUTPUT:\n//    Q12: [4,25,64]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 13 ----------\n// Back in the old days, the early 2000s, this was a famous technical interview question. Write a function definition that takes NO parameters. The function will loop from 1 to 15 and return an array of numbers. While looping, the function will check if the current value in the loop is divisible by 3, by 5, or by both. If the current value in the loop is divisible by 3, the function will add the string \"fizz\" to an array. If the current value in the loop is divisible by 5, the function will add the string \"buzz\" to the array. If the current value in the loop is divisible by both, the function will add the value \"fizzbuzz\" to the array. If the number isn't divisible by 3, 5, OR both, it will add the number to the array.  The function will return the array of values.\n\n// EXAMPLE LOG:\n//    console.log(\"BONUS: \", fizzBuzz();\n// EXAMPLE OUTPUT:\n//    BONUS: [1,2,'fizz',4,'buzz','fizz',7,8,'fizz','buzz',11,'fizz',13,14,'fizzbuzz']\n\n// PUT YOUR CODE HERE\n\n```",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c6499"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\n- [V2 Scrimba - JS Deep Dive - Arrays](https://v2.scrimba.com/javascript-deep-dive-c0a/~01h)\n- **NOTE: Watch only the first four videos in this playlist ( (1) Module Intro: Arrays, (2) Build Flexible Collections with Arrays, (3) Challenge: Your First Array, and (4) Check Element Existence in Arrays ). The rest of the topics we will cover in Week 5.**\n  - **If you are getting an alert saying \"Only available to subscribers\" when trying to access the JS Deep Dive - Arrays content, you will need to be sure your are logged in to Scrimba with the email address we have on file for you, and that you have redeemed the link to free access you were emailed**\n\nThe following material is an excerpt from The Odin Project – Fundamentals Part 4.  That section also covers Array Methods and Test Driven Development which will be covered later in this class. For convenience we've copied the Loop, Array, and Knowledge Check information from the Fundamentals Part 4 section below.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.\n\n# **Loops**\n\nComputers don’t get tired, and they’re really, *really* fast! For that reason, they are well suited to solving problems that involve doing calculations multiple times. In some cases, a computer will be able to repeat a task *thousands* or even *millions* of times in just a few short seconds where it might take a human many hours. (Obviously, speed here depends on the complexity of the calculation and the speed of the computer itself). One way to make a computer do a repetitive task is using a **loop**.\n\n1. Read this [MDN article](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code). It’s a longer one, but make sure you tackle the ‘Active Learning’ sections at the bottom of the page.\n2. Once again, same info, slightly different context from [JavaScript.info](http://javascript.info/while-for). (Skim the info if you think you know it all, but **don’t forget the tasks at the end of the page**. You learn best by *doing*.)\n\n# **Arrays**\n\nStrings and numbers may be our building blocks, but as your scripts get more complex, you’re going to need a way to deal with large quantities of them. Luckily, JavaScript has a couple of data types that are used for just that. An Array is simply an ordered collection of items (Strings, numbers, or other things).\n\n1. [This tutorial](https://www.w3schools.com/js/js_arrays.asp) is a great introduction.\n2. [This article](https://www.w3schools.com/js/js_array_methods.asp) covers some of the most useful built-in array methods. These fundamentals are something you’ll use every day, so don’t rush too much and miss out!\n3. [Web Dev Simplified video](https://www.youtube.com/watch?v=7W4pQQ20nJg) explains an overview of arrays in JavaScript in about 6 minutes.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6497"
        },
        {
          "subsectionOrder": 2,
          "title": "Knowledge Check",
          "content": "This section contains questions for you to check your understanding of the lessons from this week and last week on your own. If you’re having trouble answering a question, click it and review the material it links to.\n\n- [What is an array?](https://www.w3schools.com/js/js_arrays.asp)\n- [What are arrays useful for?](https://www.w3schools.com/js/js_arrays.asp)\n- [How do you access an array element?](https://www.w3schools.com/js/js_arrays.asp)\n- [How do you change an array element?](https://www.w3schools.com/js/js_arrays.asp)\n- [What are some useful array properties?](https://www.w3schools.com/js/js_arrays.asp)\n- [What are some useful array methods?](https://www.w3schools.com/js/js_array_methods.asp)\n- [What are loops useful for?](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#why_bother)\n- [What is the break statement?](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#exiting_loops_with_break)\n- [What is the continue statement?](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#skipping_iterations_with_continue)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c6498"
        }
      ]
    },
    {
      "id": "68f7ef51d68ee1a7419c649b",
      "lessonNumber": 3,
      "title": "Lesson 3",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 3",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "**NOTE: If the CodeSandbox file gets updated, the code example below may not be up to date.  You can confirm the most recent version of this assignment by clicking this:**\n[Link to CodeSandbox Assignment](https://codesandbox.io/p/sandbox/lesson-3-javascript-objects-2025-hr9j68?file=%2Fsrc%2Findex.mjs)\n\n``` javascript\n//--------------- IMPORTANT!!! ---------------\n\n// Use the keyboard shortcut Alt + Z (for PC) or Option + Z (for Mac) to allow word wrap on this document.  Word wrap breaks the lines so you don't have to keep scrolling left and right to read.\n\n//READ THE INFORMATION IN THE BROWSER WINDOW PANEL ON THE RIGHT BEFORE BEGINNING YOUR ASSIGNMENT!!\n\n//---------- OVERVIEW AND INSTRUCTIONS ----------\n\n//-------------------------------------------\n// LESSON 3 OBJECTS\n//-------------------------------------------\n\n//# JavaScript Objects\n// This is the coding assigment for the third week of the Intro to Programming course from Code the Dream. The concepts touched on in this assignment include:\n//   - Object Basics\n//   - Primitive vs Object Types\n//   - Object Destructuring\n//   - Manipulating Objects\n\n// In this assignment you will write your own code. Your instructions are listed as \"comments\", meaning the instructions are grayed out and start with '//' at the beginning of the line of code. Put your answers immediately below the instructions for each question. As mentioned in the Welcome to week 3 information to the right, you'll need to use console logs for all the questions to check your code output. Using a function in a console.log is very similar to how you were using them with variables last week. To invoke/call the function use the syntax:\n\n//  console.log(\"Q#: \", functionName(anyInput))\n\n// Please be sure to check the output of your called functions and console logs in the Console tab to the bottom right of this screen. If your Console is not showing, click the Inspect Button in the top right (see the Welcome to week 3 information to the right if you need help finding that)  Check to make sure that the output you get in your Console is the expected output.\n\n// ---------- QUESTION 1 ----------\n// Objects are a way to store property:value pairs of data in a variable.  First, create an object called 'myPet'.  Add three properties called 'name', 'species', and 'color' to the 'myPet' object below and assign each of them values.  Use your console.log's to print the values of each property to the console.\n\n// EXAMPLE LOG:\n//    console.log(\"Q1 name: \", myPet.name);\n//    console.log(\"Q1 species: \", myPet.species);\n//    console.log(\"Q1 color: \", myPet.color);\n// EXAMPLE OUTPUT:\n//    Q1 name: Teddy\n//    Q1 species: ferret\n//    Q1 color: brown\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 2 ----------\n// Now let's see how we can use the property:value pairs in template literals.  Create a variable called 'aboutPet' and assign it a template literal that uses the 'myPet' object to make a sentence sharing all the pet details.  The sentence should look something like this: \"Teddy is a brown ferret.\"\n\n// EXAMPLE LOG:\n//    console.log(\"Q2: \", aboutPet);\n// EXAMPLE OUTPUT:\n//    Q2: Teddy is a brown ferret.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 3 ----------\n// Let's add a method to our object.  Create a method called 'age' that takes no parameters, and uses no outside variables (hint: use 'this').  The method should return the age of the pet in years.\n\n// EXAMPLE LOG:\n//    console.log(\"Q3: \", myPet.age());\n// EXAMPLE OUTPUT:\n//    Q3: 7\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 4 ----------\n// Now, let's see how we can use data within objects in functions.  Write a function called 'isDog' that takes one object parameter.  In the function, create a variable called 'speciesChecker' and assign it the value 'dog'.  Then, still in the function, return true if the object's species value is equal to the variable 'speciesChecker', or false if not.\n\n// EXAMPLE LOG:\n//    console.log(\"Q4: \", isDog(myPet));\n// EXAMPLE OUTPUT: (if your 'myPet' object from Question 1 is about any animal other than a dog)\n//    false\n// NOTE: if when you made 'myPet' in Question 1, you did put dog as species, you should get true as your output instead.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 5 ----------\n// Now lets work with date and time\n// Create a function called 'month'.  Inside the function, declare a variable named 'today' that uses the Date object.  Your function should then return only the month of the 'today' variable.  You can return the month as a number\n// STRETCH GOAL: Return the month as a string\n\n// EXAMPLE LOG:\n//    console.log(\"Q5: \", month());\n// EXAMPLE OUTPUT: (Will be different for each class but should be the current month.  For example if you're doing this assignment in January...)\n//    Q5: 01\n//    stretch goal should result in:\n//    Q5: January\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 6 ----------\n// Let's explore dates now.  Create a variable named 'birthday' and assign it the date of your next birthday.  Then create a function called 'birthdayCountdown' that takes birthday as a parameter and returns the number of days until your next birthday.  Remember that you may need to use a particular format for your birthday so you can properly convert the data to something you can use in the function.  CAUTION: 2024 is a leap year!\n\n// STRETCH GOAL: As we mentioned in Question 8, you should consider boundary cases. What if the date wasn't formatted to work with your function?\n\n// EXAMPLE LOG:\n//    console.log(\"Q6: \", birthdayCountdown(birthday));\n// EXAMPLE OUTPUT: (if your next birthday was March 15, 2024 and today was February 3, 2024)\n//    Q6: 41\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 7 ----------\n// If we work with dates, we should work with time also.  Create a variable named 'startTime' and assign it a start time.  Create a variable named 'endTime' and assign it an end time.  Then create a function called 'timeDifference' that takes startTime and endTime as parameters and returns the number of hours and minutes between the start and end times.  Remember that you may need to be careful what format you use when entering times so you can properly convert the data to something you can use in the function.\n\n// STRETCH GOAL: You should consider boundary cases. What if the times are not formatted to work with your function?\n\n// EXAMPLE LOG:\n//    console.log(\"Q7: \", timeDifference(startTime, endTime));\n// EXAMPLE OUTPUT: (if startTime was 12:37pm and endTime was 3:19pm)\n//    Q7: 2 hours and 42 minutes\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 8 ----------\n// Create a function called 'absDiff' that takes 2 parameters and returns the absolute difference between them. For example, if the first parameter is smaller than the second, the first parameter will be subtracted from the second. If the first parameter is larger than the second, the second parameter will be subtracted from the first. If they are both equal, return the first parameter subtracted by the second.  It's important to consider boundary cases - situations that may change how you expect your code to behave.  For this reason, work with same numbers and negative numbers as well to see if you get your absDiff function to calculate the absolute difference regardless of number type.\n\n// EXAMPLE LOG 1:\n//    console.log(\"Q8 first larger: \", absDiff(29, 5));\n// EXAMPLE OUTPUT: (if using the numbers 29 and 5 as in the example log)\n//    Q8 first larger: 24\n// EXAMPLE LOG 2:\n//    console.log(\"Q8 second larger: \", absDiff(3, 16));\n// EXAMPLE OUTPUT: (if using the numbers 3 and 16 as in the example log)\n//    Q8 second larger: 13\n// EXAMPLE LOG 3:\n//    console.log(\"Q8 same nums: \", absDiff(5, 5));\n// EXAMPLE OUTPUT 3: (if using the numbers 5 and 5 as in the example log)\n//    Q8 same nums: 0\n// EXAMPLE LOG 4:\n//    console.log(\"Q8 neg num: \", absDiff(-6, 5));\n// EXAMPLE OUTPUT 4: (if using the numbers -6 and 5 as in the example log)\n//    Q8 neg num: 11\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 9 ----------\n// Create a function called 'convertTemp' that takes 1 temperatue parameter in celsius and return the temperature in Fahrenheit.  Log both the input and output values\n\n// EXAMPLE LOG:\n//    console.log(\"Q9 convertTemp: \", celsiusTemp, convertTemp(celsiusTemp));\n// EXAMPLE OUTPUT:\n//    Q9 convertTemp: 0 32\n// Create logs for several different celsium temperatures\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 10 ----------\n// Create a function called 'reverseString' that takes 1 string parameter and returns the reverseString.  Log both the input and output values\n\n// EXAMPLE LOG:\n//    console.log(\"Q10 reverseString: \", inputString, reverseString(inputString));\n// EXAMPLE OUTPUT:\n//    Q10 reverseString: HelloWorld dlroWolleH\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 11 ----------\n// Declare a variable named \"diameter\" and assign it an integer value. Through a series of math calculations and variables, calculate the \"radius\" (which is half the diameter), the \"circumference\" (which is 2 multiplied by the Math value pi, multiplied by the radius) and the \"area\" (which is the Math value pi, multiplied by the radius squared).\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 12 ----------\n// Let's make a useful math problem - create a tip calculator! Declare two variables called \"billTotal\" and \"tipPercentage\". Assign billTotal a floating point number with two decimal places. Assign tipPercentage a floating point number between 0.1 and 0.9. Create a third variable called \"tip\" that will multiply tipPercentage and billTotal then use the addition assignment operator to add that amount back to billTotal. Example: if our bill 35.75 and we want to leave a 20% tip (0.2) our new billTotal should come out to 42.90.\n\n// PUT YOUR CODE HERE\n\n// Don't forget your console.logs!\n\n// ---------- QUESTION 13 ----------\n// Create two variables named 'num1' and 'num2' and assign them integer values. Create a function called 'multiplyThese' that takes 2 parameters and returns the product  of the two parameters (as a reminder, a product is the resulting number when two numbers are multiplied together).\n\n// EXAMPLE LOG:\n//    console.log(\"Q13: \", multiplyThese(num1, num2));\n// EXAMPLE OUTPUT: (if num1 and num2 are 2 and 5 respectively))\n//    Q13: 10\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 14 ----------\n// Building on the last question, create a function called 'getAverage' that takes 2 parameters and returns their average (hint: there is no built-in average operator in JavaScript).  Use the variables (num1 and num2) you created in Question 6 to test your function.  NOTE: In some programming languages, the types of numbers you use in equations can effect what type of number (integer/floating point) you get as a result.  We suggest using 2.0 instead of 2 as you're calculating the average.\n\n// EXAMPLE LOG:\n//    console.log(\"Q14: \", getAverage(num1, num2));\n// EXAMPLE OUTPUT: (based on num1 and num2 above)\n//    Q14: 3.5\n\n// PUT YOUR CODE HERE\n\n```",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c649d"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Lesson 3",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.\n\n- [The Odin Project – Fundamentals Part 5](https://www.theodinproject.com/lessons/foundations-fundamentals-part-5)\n  - You can skip the section on Intermediate/advanced array magic as we'll be looking at that next week!\n- [V2 Scrimba - JS Deep Dive - Objects & Maps](https://v2.scrimba.com/javascript-deep-dive-c0a/~015)\n- **NOTE: You do NOT have to watch the last three videos in this playlist ( (1) How Maps Can Do What Objects Can't, (2) Challenge: Your First Map, and (3) Improved Methods with Arrow Functions ). Those cover a topic that will NOT be covered in this lesson (i.e. Map).**\n  - **If you are getting an alert \"Only available to subscribers\" you need to be sure your are logged in to Scrimba with the email address we have on file for you, and that you have redeemed the link to free access you were emailed**\n",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c649c"
        }
      ]
    },
    {
      "id": "68f7ef51d68ee1a7419c649f",
      "lessonNumber": 4,
      "title": "Callbacks",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 4",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "**NOTE: If the CodeSandbox file gets updated, the code example below may not be up to date.  You can confirm the most recent version of this assignment by clicking this:**\n[Link to CodeSandbox Assignment](https://codesandbox.io/p/sandbox/lesson-4-javascript-array-methods-2025-w4mycz?file=%2Fsrc%2Findex.mjs)\n\n``` javascript\n//--------------- IMPORTANT!!! ---------------\n\n// Use the keyboard shortcut Alt + Z (for PC) or Option + Z (for Mac) to allow word wrap on this document.  Word wrap breaks the lines so you don't have to keep scrolling left and right to read.\n\n//READ THE INFORMATION IN THE BROWSER WINDOW PANEL ON THE RIGHT BEFORE BEGINNING YOUR ASSIGNMENT!!\n\n//---------- OVERVIEW AND INSTRUCTIONS ----------\n\n//----------------------------------\n// LESSON 4 ARRAY METHODS\n//----------------------------------\n\n//  This is the coding assigment for the fourth week of the Intro to Programming course from Code the Dream. The concepts touched on in this assignment include:\n\n//  - Using Array Methods\n//  - Understanding about iterative methods\n//  - Learning about callbacks\n//  - Creating Higher Order Functions\n//  - Using existing Array Higher Order Functions (e.g. forEach(), map(), filter(), etc.)\n\n// In this assignment you will write your own code. Your instructions are listed as \"comments\", meaning the instructions are grayed out and start with '//' at the beginning of the line of code. Put your answers immediately below the instructions for each question. As mentioned in the Welcome to week 4 information to the right, you'll need to use console logs for all the questions to check your code output. Using a function in a console.log is very similar to how you were using them with variables last week. To invoke/call the function use the syntax:\n\n//  console.log(\"Q#: \", functionName(anyInput))\n\n// Please be sure to check the output of your called functions and console logs in the Console tab to the bottom right of this screen. If your Console is not showing, click the Inspect Button in the top right (see the Welcome to week 4 information to the right if you need help finding that)  Check to make sure that the output you get in your Console is the expected output.\n\n// ----- Practice JS array methods: forEach -----\n//---------- QUESTION 1 ----------\n// Create an variable called 'names' and assign it an array of people's names.  Write a function called 'printNames' that uses the forEach array method to log each name in an array to the console.  Remember, since you're using the console.log in the function, you'll just want to call your function and pass it the array of names when testing your code.\n\n// EXAMPLE CALL:\n//    let names = [\"Juan Marcos\", \"Aleksandra Ivanov\", \"Zhang Wei\", \"Bernice King\"];\n//    console.log(\"Q1 printNames:\");\n//    printNames(names);\n\n// EXAMPLE OUTPUT:\n//   Q1 printNames:\n//   Juan Marcos\n//   Aleksandra Ivanov\n//   Zhang Wei\n//   Bernice King\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 2 ----------\n// Create a variable called 'trees' and assign it an array of 3 objects.  Each object should have a 'type' property and a 'height' property.  You can use 'type' to describe the type of tree (ex. Dogwood, Maple, Oak, Elm, etc.) and give them any height.  Now write a function called 'logTreeType' that uses forEach to log the type of each tree object to the console.\n\n// EXAMPLE CALL:\n//   const trees = [\n//     { type: \"oak\", height: \"30m\" },\n//     { type: \"elm\", height: \"25m\" },\n//     { type: \"birch\", height: \"18m\" } ]\n//   console.log(\"Q2 logTreeType:\");\n//   logTreeType(trees);\n\n// EXAMPLE OUTPUT:\n//   Q2 logTreeType:\n//   oak\n//   elm\n//   birch\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 3 ----------\n// Create a variable called 'myNumbers' and assign it an array of numbers.  Now write a function caled 'totalPoints' that uses forEach to add up all the numbers in that array of numbers.\n\n// EXAMPLE CALL:\n//   let myNumbers = [1, 2, 7, 5, 8];\n//   console.log (`Q3 totalPoints [${myNumbers}]:`, totalPoints(myNumbers));\n\n// EXAMPLE OUTPUT:\n//   Q3 totalPoints [1,2,7,5,8]:  23\n\n// Try a few different input arrays to verify your code is working.\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 4 ----------\n// Create a variable called 'myWords' and assign it an array of words.  Then write a function called 'buildSentence' that takes in an array of words and uses forEach to add the strings together. It should also add a space, \" \", after each word.\n\n// EXAMPLE CALL:\n//    myWords = [\"You\",\"can\",\"if\",\"you\",\"think\",\"you\",\"can\",\"!\"];\n//    console.log (`Q4 buildSentence [${myWords}]: `, buildSentence(myWords));\n\n// EXAMPLE OUTPUT:\n//   Q4 buildSentence [You,can,if,you,think,you,can,!]:  You can if you think you can !\n\n// Note: You should have a space after the ! too\n// Try a few different input arrays to verify your code is working.\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 5 ----------\n// Create a variable called 'decimals' and assign it an array of decimal numbers.  Write a function called 'logPercentages' that takes an array of decimal numbers and uses forEach to log each one with the numbers formatted as percentages. That means:\n//    Multiply by 100\n//    Include the percent symbol (%) at the end of the string\n\n// EXAMPLE CALL:\n//   let decimals = [0.75, 0.91, 0.2, 1.34];\n//   console.log(\"Q5 logPercentages:\");\n//   logPercentages(decimals);\n\n// EXAMPLE OUTPUT:\n// Q5 logPercentages:\n//   75%\n//   91%\n//   20%\n//   134%\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS Array Methods - map -----\n// ---------- QUESTION 6 ----------\n// Let's practice using the map array method.  Create a variable called 'startingNums' and assign it an array of numbers.  Then write a function called 'addThreeToAll' that uses map to add 3 to each number in an array of numbers.\n\n// EXAMPLE CALL:\n//   let startingNums = [4, 41, 832, 72, 89];\n//   console.log (`Q6 addThreeToAll [${startingNums}]: `, addThreeToAll(startingNums));\n\n// EXAMPLE OUTPUT:\n//   Q6 addThreeToAll [4,41,832,72,89]:  [ 7, 44, 835, 75, 92 ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 7 ----------\n// Create a variable called 'baseNums' and assign it an array of numbers.  Write a function called 'squareAll' that takes in an array of numbers, and uses map to return an array containing the squares of each of the numbers.  Remember, you can square a number by multiplying it by itself, or by using the exponent operator like so:\n// let number = 4\n// number * number // 16\n// number ** 2 // 16\n// Note that the caret operator ^ does NOT mean exponent in JavaScript\n\n// EXAMPLE CALL:\n//   let baseNums = [4, 41, 832, 72, 89];\n//   console.log (`Q7 squareAll [${baseNums}]:`, squareAll(baseNums));\n\n// EXAMPLE OUTPUT:\n//   Q7 squareAll [4,41,832,72,89]: [ 16, 1681, 692224, 5184, 7921 ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 8 ----------\n// Write a function called 'allGreetings' that takes an array of names (strings) by using your 'names' variable from question 1. Return an array of greetings (strings). The greetings should each be \"Hello, [name], nice to meet you!\".  You might find it helpful to use template strings.\n\n// EXAMPLE CALL: (using the names array from question 1)\n//   console.log (`Q8 allGreetings [${names}]:`, allGreetings(names));\n\n// EXAMPLE OUTPUT:\n// Q8 allGreetings [Juan Marcos,Aleksandra Ivanov,Zhang Wei,Bernice King]: [\n//  'Hello, Juan Marcos, nice to meet you!',\n//  'Hello, Aleksandra Ivanov, nice to meet you!',\n//  'Hello, Zhang Wei, nice to meet you!',\n//  'Hello, Bernice King, nice to meet you!'\n// ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 9 ----------\n// Create a variable called 'users' and assign it an array of objects.  See example on line 153 below.  Write a function called 'getUsernames' that takes in an array of user objects and uses map to return an array of just the usernames.\n\n// EXAMPLE CALL:\n//   let users = [\n//   {\n//     username: \"juan.marcos\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"aleksandra.ivanov\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"zhang.wei\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"bernice.king\",\n//     isAdmin: true,\n//   }\n//   ];\n//\n//  console.log (`Q9 getUsernames:`, getUsernames(users));\n\n// EXAMPLE OUTPUT:\n//   Q9 getUsernames: [ 'juan.marcos', 'aleksandra.ivanov', 'zhang.wei', 'bernice.king' ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 10 ----------\n// Write a function called 'pluck' that takes in an array of objects and a string representing a key as parameters, and uses the map method to return an array of the values at that key for each of the objects.  For example, if we used the users array from the last exercise, we could do pluck(users, 'username') to get the same results as the last question.  If any of the objects does not have a value at that key, the array should have undefined in that slot.  Hint: Using the square bracket notation, you can access a property of an object using a variable.\n\n// EXAMPLE CALL: (using the users array from Q9)\n//   console.log (`Q10 pluck \"isAdmin\":`, pluck(users, \"isAdmin\"));\n\n// EXAMPLE OUTPUT:\n//   Q10 pluck \"isAdmin\": [ false, false, false, true ]\n\n// Try testing with username too!\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS methods - filter -----\n// ---------- QUESTION 11 ----------\n// Write a function called 'evenNumbers' that takes an array as an argument and uses the filter method.  Return only the even numbers from the array of numbers.  Remember - you can find out if a number is even by using the % operator (modulus operator) like this:\n//  number % 2 === 0   (gives a true boolean result, for even numbers)\n\n// EXAMPLE CALL:\n//   let numberArray = [4, 41, 832, 72, 89, 120, 431, 505, 70];\n//   console.log (`Q11 evenNumbers [${numberArray}]:`, evenNumbers(numberArray));\n\n// EXAMPLE OUTPUT:\n//   Q11 evenNumbers [4,41,832,72,89,120,431,505,70]: [ 4, 832, 72, 120, 70 ]\n//\n// If there are no even numbers in the array you make and use, return an empty array.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 12 ----------\n// Write a function called 'greaterThan100' that takes in an array of numbers and uses the filter method.  Return any items in the array that are greater than 100.\n\n// EXAMPLE CALL:\n//   let numArray = [4,41,832,72,89,120,431,505,70];\n//   console.log (`Q12 greaterThan100 [${numArray}]:`, greaterThan100(numArray));\n\n// EXAMPLE OUTPUT:\n//   Q12 greaterThan100 [4,41,832,72,89,120,431,505,70]: [ 832, 120, 431, 505 ]\n//\n// If there are no numbers greater than 100, return an empty array.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 13 ----------\n// Write a function called 'nonAdminUsers' that takes in an array of user objects.  The objects should have a username and isAdmin property each like they do in Question 9.  The function should use the filter method to return the users who are not admins.\n\n// EXAMPLE CALL: (using users array from Q9)\n//   console.log (`Q13 nonAdminUsers:`, nonAdminUsers(users));\n\n// EXAMPLE OUTPUT:\n//   Q13 nonAdminUsers: [\n//     { username: 'juan.marcos', isAdmin: false },\n//     { username: 'aleksandra.ivanov', isAdmin: false },\n//     { username: 'zhang.wei', isAdmin: false }\n//   ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 14 ----------\n// Write a function called 'countAdminUsers' that uses filter and the length method on the result from filter.  The function should return the number of users that have 'isAdmin: true' as part of their object.\n// EXAMPLE CALL: (using users array from Q9)\n//   console.log (`Q14 countAdminUsers:`, countAdminUsers(users));\n\n// EXAMPLE OUTPUT:\n//   Q14 countAdminUsers: 1\n\n// It should only count Bernice King since she is the only admin in that example.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 15 ----------\n// Write a function called 'shorterThanX' that takes two arguments: an array of strings and an integer.  Use the filter method to return all the strings in the array whose length is shorter than the integer provided as an argument.  If there's no strings in the array that are shorter than the number, return an empty array.\n\n// EXAMPLE ARRAY:\n// let strings = [\n//   \"Four score and seven years ago\",\n//   \"our forefathers brought forth on this continent a new nation\",\n//   \"conceived in liberty\",\n//   \"and dedicated to the proposition that all men are created equal\",\n//   \"Now we are engaged in a great civil war\",\n//   \"testing whether that nation\",\n//   \"or any so conceived and so dedicated\",\n//   \"can long endure.\",\n// ];\n\n// EXAMPLE CALL1:\n//   console.log (`Q15 shorterThanX 20:`, shorterThanX(strings, 20));\n// EXAMPLE OUTPUT1:\n//   Q15 shorterThanX 20: [ 'can long endure.' ]\n\n// EXAMPLE CALL2:\n//   console.log (`Q15 shorterThanX 30:`, shorterThanX(strings, 30));\n// EXAMPLE OUTPUT2:\n//   Q15 shorterThanX 30: [\n//    'conceived in liberty',\n//    'testing whether that nation',\n//    'can long endure.'\n//  ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 16 ----------\n// Write a function called 'onlyStrings' that takes an array that has different types of elements (numbers, booleans, strings, etc.) and uses the filter method to return an array of only the strings.\n\n// EXAMPLE CALL:\n//   let manyTypes = [4, \"4\", \"four score\", 80, {age: 80}, [\"nations\"], {type: \"free\"}, \"states\"];\n//   console.log (`Q16 onlyStrings [${manyTypes}]:`, onlyStrings(manyTypes));\n\n// EXAMPLE OUTPUT:\n//   Q16 onlyStrings [4,4,four score,80,[object Object],nations,[object Object],states]: [ '4', 'four score', 'states' ]\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS methods - find -----\n// ---------- QUESTION 17 ----------\n// Write a function called 'firstOdd' that takes an array of numbers as an argument.  The function should use the find method to find the first odd number in an array.  Remember - you can find out if a number is odd using the % operator like so:\n// number % 2 === 1  (gives a true boolean result, for odd numbers)\n// If there are no odd numbers, return undefined.\n\n// EXAMPLE CALL:\n//   let array = [4,41,832,72,89,120,431,505,70]\n//   console.log (`Q17 firstOdd [${array}]:`, firstOdd(array));\n\n// EXAMPLE OUTPUT:\n//   Q17 firstOdd [4,41,832,72,89,120,431,505,70]: 41\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 18 ----------\n// Write a function called 'divisibleByTen' that takes an array of numbers as an argument.  The function should use the find method to return the first number that is a multiple of 10.  If there are no numbers divisible by 10, return undefined.\n\n// EXAMPLE CALL:\n//   let divArray = [4,41,832,72,89,120,431,505,70]\n//   console.log (`Q18 divisibleByTen [${divArray}]:`, divisibleByTen(divArray));\n\n// EXAMPLE OUTPUT:\n//   Q18 divisibleByTen [4,41,832,72,89,120,431,505,70]: 120\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 19 ----------\n// Write a function called 'divisibleByX' that takes two arguments: an array and an integer.  The function should use the find method to return the first number in the array that's divisible by the integer that was passed as an argument.  If there are no values that are divisible by the second argument, return undefined.\n\n// EXAMPLE ARRAY:\n//    let numbers = [4,41,832,72,89,120,431,70];\n\n// EXAMPLE CALL 1:\n//    Qconsole.log (`Q19 divisibleByX ([${divArray}], 10):`, divisibleByX(numbers, 10));\n// EXAMPLE OUTPUT 1: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70], 10): 120\n\n// EXAMPLE CALL 2:\n//    console.log (`Q190 divisibleByX ([${divArray}]. 3):`, divisibleByX(numbers, 3));\n// EXAMPLE OUTPUT 2: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70]. 3): 72\n\n// EXAMPLE CALL 3:\n//    console.log (`Q19 divisibleByX ([${divArray}], 2):`, divisibleByX(numbers, 2));\n// EXAMPLE OUTPUT 3: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70], 2): 4\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 20 ----------\n// Write a function called 'startsWithLetter' that takes two arguments: an array of strings and a letter.  The function should use the find method to return the first string in the array that starts with the letter provided as the argument.  If there's no string in the array that starts with that letter, return undefined. The function should leave lowercase and uppercase letters alone.\n// STRETCH GOAL: Throw an error \"Letter must be a string of length 1\" if the second argument is not a string, or if its length is more than 1.\n\n// EXAMPLE ARRAY:\n// let jokeStrings =\n//   [\"Do you want to hear a joke?\",\n//    \"It's about a three-legged dog\",\n//    \"The dog walks into a bar\",\n//    \"The dog says, \",\n//    \"\\\"I'm looking for the man who shot my paw\\\"\",\n//    \"Get it?\"]\n\n// EXAMPLE CALL 1:\n//    console.log (`Q20 startsWithLetter T:`, startsWithLetter(jokeStrings, \"T\"));\n// EXAMPLE OUTPUT 1: (if using the example array above)\n//    Q20 startsWithLetter T: The dog walks into a bar\n\n// EXAMPLE CALL 2:\n//    console.log (`Q20 startsWithLetter I:`, startsWithLetter(jokeStrings, \"I\"));\n// EXAMPLE OUTPUT 2: (if using the example array above)\n//    Q20 startsWithLetter I: It's about a three-legged dog\n\n// EXAMPLE CALL 3:\n//    console.log (`Q20 startsWithLetter i:`, startsWithLetter(jokeStrings, \"i\"));\n// EXAMPLE OUTPUT 3: (if using the example array above)\n//    Q20 startsWithLetter i: undefined\n\n// STRETCH GOAL EXAMPLE CALL:\n//    console.log (`Q20 startsWithLetter dog:`, startsWithLetter(jokeStrings, \"dog\"));\n// STRETCH GOAL EXAMPLE OUTPUT:\n//    Q20 startsWithLetter dog: Error: Letter must be a string of length 1\n\n// PUT YOUR CODE HERE\n\n```",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c64a4"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "- [V2 Scrimba - JS Deep Dive - Objects & Maps](https://v2.scrimba.com/javascript-deep-dive-c0a/~01d)\n- **NOTE: Watch only the rest of the videos in the playlist (the last 3 you were instructed to skip last week).**\n  - **If you are getting an alert \"Only available to subscribers\" you will need to be sure your are logged in to Scrimba with the email address we have on file for you, and that you have redeemed the link to free access you were emailed.  Remember to start at the 9th part titled \"How Maps can do what Objects can't\" and go to the end of the Objects section**\n\n- The section on \"Intermediate/advanced array magic\" that you could skip in last week's Odin Project Fundamentals part 5 is now included in the following section for you to check out this week:\n\n> ### Intermediate/advanced array magic\n>\n> Besides being a quick and handy way to store data, arrays also have a set of functions for manipulating that data in very powerful ways. Once you begin to master these functions you will start to see ways to use them all over the place! There are really only a handful of these functions… but as you’ll soon see, the possibilities of what you can do with them are near endless.\n>\n> 1. Start out by watching [this video](https://www.youtube.com/watch?v=HB1ZC7czKRs) from Wes Bos. To follow along, use your local Javascript30 repository. If you don’t have the repo yet, clone it from [here](https://github.com/wesbos/JavaScript30).\n> 2. Watch and code with [Part 2](https://www.youtube.com/watch?v=QNmRfyNg1lw) of Wes Bos’s array series.\n> 3. For a more comprehensive and in-depth guide to array methods in JavaScript, you can also check out this [array method guide](https://javascript.info/array-methods). This resource covers each method in detail, with examples and explanations of their usage.\n\n# Callbacks\n\nCallbacks are functions that you provide to another function or system to be executed when a certain condition or event occurs. They are a way of saying, \"Hey, when this thing happens, do this specific task.”\n\nImagine you have a button on a website, and you want something to happen when the button is clicked. You could create a callback function that specifies what should happen when the button is clicked. This callback function is then associated with the button.\n\n```jsx\n// A function that adds two numbers and uses a callback to return the result\nfunction addNumbers(a, b, callback) {\n  const result = a + b;\n  callback(result);\n}\n\n// Define a callback function to handle the result\nfunction handleResult(result) {\n  console.log(\"The result is: \" + result);\n}\n\n// Call the addNumbers function with a callback\naddNumbers(5, 3, handleResult);\n```\n\nIn this example, the **`addNumbers`** function takes two numbers **`a`** and **`b`**, adds them together, and then calls a provided **`callback`** function with the result. The **`handleResult`** function is the callback, and it prints the result to the console.\n\nThis demonstrates how callbacks can be used to pass control from one function to another, allowing you to specify what should happen after a specific operation (in this case, addition) is complete.\n\nWatch this video on the mistake with functions every developer makes, because remember **making mistakes is a great way to learn!** [YouTube Video Link](https://www.youtube.com/watch?v=7UMuJMiNjSk&t=98s)\n\nCallbacks are a versatile and powerful concept in programming, and they can be used in various scenarios. Here are some common situations where callbacks are useful:\n\n1. **Asynchronous Operations:** Callbacks are often used with asynchronous operations, like making network requests, reading files, or interacting with databases. They allow you to specify what should happen when the operation is completed without blocking the rest of your program.\n2. **Event Handling:** In user interfaces, callbacks are used to respond to user interactions such as button clicks, mouse movements, or keyboard input. You define a callback function that gets triggered when the event occurs.\n3. **Modular and Reusable Code:** Callbacks make it easier to write modular and reusable code. You can create functions that accept callbacks to perform specific tasks, allowing you to reuse those functions with different behaviors depending on the callback provided.\n4. **Iterations and Loops:** Callbacks can be used in iterations and loops to execute a function for each element in a collection, like an array or a list. This is known as \"callback-based iteration.\"\n5. **Promises and Promisified Code:** In JavaScript, promises often work with callbacks to handle asynchronous tasks more cleanly. Promises provide a structured way to handle callbacks and make asynchronous code easier to read and maintain.\n\nOverall, callbacks are a fundamental building block in software development, enabling you to define what should happen when a particular event or operation occurs, making your code more flexible, modular, and responsive.\n\nWe will be covering all these aspects of the uses of callbacks in later lessons, but it is important to understand how they work at a very basic level.\n\n# Higher Order Functions\n\nAs we talked about callbacks previously, higher-order functions are those functions that receive a callback as a parameter.\n\n```jsx\nfunction addNumbers(a, b, callback) {\n  const result = a + b;\n  callback(result);\n}\n```\n\nYou can create your own higher-order functions or you can use many of the built-in higher-order methods that are part of the Array object.\n\nArrays have many methods and one category of methods it has are iterative which means they will iterate through the array and execute the callback function you pass to it for every element in the array.\n\nExamples would be the [forEach()](https://javascript.info/array-methods#iterate-foreach), [map()](https://javascript.info/array-methods#map), [filter()](https://javascript.info/array-methods#filter), and others.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a0"
        },
        {
          "subsectionOrder": 2,
          "title": "The forEach() method",
          "content": "The forEach() method accepts a function as an argument. The function that you pass to the method is referred to as a **callback** function. \n\nYou provide forEach() with a callback function. Then, internally, forEach() executes that callback function once for each element of the array. \n\n```jsx\nconst numbers = [1, 2, 3, 4];\nnumbers.forEach(function(num) {\n  console.log(num);\n});\n// This will print each number in the array.\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a1"
        },
        {
          "subsectionOrder": 3,
          "title": "The map() method",
          "content": "The map() will run the callback function for each of the items in the array. The map() method uses the callback function to create the items for a new array. The map() method will return a new array of the same number of elements as the original array and the forEach method will not return anything.\n\n```jsx\nconst numbers = [1, 2, 3, 4];\nconst squared = numbers.map(function(num) {\n  return num * num;\n});\n// squared is now [1, 4, 9, 16]\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a2"
        },
        {
          "subsectionOrder": 4,
          "title": "The filter() method",
          "content": "Sometimes, you'll want to build up a new list of items that meet a particular condition. This method builds a new array of only the items that match a certain condition. The filter() method will “filter” the array so that you have only some of the items.\n\n```jsx\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter(function(num) {\n  return num % 2 === 0;\n});\n// evenNumbers is now [2, 4, 6]\n```\n\n**Note:**  There are many more of these type of methods, but do not worry about knowing how to use all of them, starting with a few is good enough.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a3"
        }
      ]
    },
    {
      "id": "68f7ef51d68ee1a7419c64a6",
      "lessonNumber": 5,
      "title": "Get ready for git!",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 5",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Prepare to code!\nIf you don't already have an IDE you prefer to use, and if you haven't yet completed the \"Get ready for git!\" section from last week's lesson, do so now.  That involves downloading and installing Visual Studio Code and getting yourself familiar with it and it's tools.  So you don't have to jump back to last week, here is the [link to download Visual Studio Code](https://code.visualstudio.com/) and the video on how to find your way around it:\n[Visual Studio Code Info Session with Shawn Clary](https://www.youtube.com/watch?v=R8lusLkuWJQ)\n\nOnce you have your local machine setup, it's time to create a repository in your cloud-based git repository on GitHub...\n\n### Create a new repository \nCreate a new repository in your GitHub account by following these steps:\n   - [ ] Go to your GitHub page and click the Repositories tab\n   - [ ] Click the green \"New\" button in the top right\n   - [ ] Fill in the fields to give your repository a name (use your name-**_classname_** as the name example: `maria-santiago-jupiter`) and description (example: portfolio project for Intro to Programming course with Code the Dream)\n   - [ ] Be sure PUBLIC is selected and check the \"Initialize this repository with: Add a README file\" check box.\n   - [ ] Click \"Create Repository\"\n\n### Clone to your local machine\nCopy the repository you just created in GitHub to your local computer by following these steps:\n   - [ ] On the main Code page of your repository, click the green \"Code\" button\n   - [ ] Your lesson walked you through setting up an SSH key with GitHub.  You should select \"SSH\" as the Local Clone type (not HTTPS or GitHub CLI).\n   - [ ] Click the copy button (two overlapping squares icon) to copy your repository address.  It should look like `git@github.com:yourUsernameHere/firstname-lastname-class.git`\n   - [ ] Go to your IDE terminal or your computer terminal.  Make sure you're in the proper directory for where you want to create and store files for your work (ex. your Desktop or a CodeTheDream folder).  Then run `git clone <repository>` where \"\\<repository\\>\" is replaced with the last portion you copied in the last step.\n\n### Get organized and write some code!\n   - [ ] Navigate into the directory you just cloned by running `cd <name-classname>` in the terminal where the <name-classname> portion is the name of your repository.\n   - [ ] Create a new local branch to house just the work you'll do for this assignment by running `git checkout -b lesson-5` in the terminal\n   - [ ] Open the README.md file in your code editor and add your full name.\n   - [ ] Create a new file in your project directory (same level as your README.md file) and title it `index.html`\n\n### Backup to the cloud\nMake sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub.\n   - [ ] Check the status of the changes you just made (editing the readme.md file and making a new index.html file) by running `git status` in your terminal\n   - [ ] Stage all your changes for commit by running `git add .` in your terminal\n   - [ ] Run `git status` again to see how things have changed.  You should get a response indicating changes staged for commit.\n   - [ ] Create a commit message for reference.  Run `git commit -m \"my first commit\"`\n   - [ ] Push these changes to your GitHub repository from your local computer by running `git push origin lesson-5`\n   - [ ] **NOTE:** if you get a \"fatal: The current branch...\" error message.  READ the message and follow the instructions in that message to confirm that you push your work to your GitHub account.\n\n**_By this point, you should have a local folder on your machine that has a README.md and index.html file, and your lesson-5 branch of your GitHub repository should also have your README.md and index.html files.  You can find your lesson-5 branch by clicking on the main button in your GitHub repository.  You should see the list of all your branches (main and lesson-5) there.  See image below for example:_**\n\n![branch drop down in GitHub repository](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2024/5e3d47bcdc1ad5b6a72a75cc5694f459ce0b5024/mainBranch.png?raw=true)\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n   - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-5 has a recent push\" notice with a green \"Compare & pull request\" button.  Click that button\n   - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n   - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/name-classname/pull/1`) and paste it into your assignment submission form.\n\n### What next?\n   - If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n   - If you're behind or are working ahead:  \n     - if you're confident your work is accurate, merge your pull request and continue working through class.\n     - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.\n    \n### REMINDER\nIf you are completing work on the Algorithms Stretch Goal this lesson, you should go to your \"Lesson 4 - Array Methods and Algorithm Stretch Goal\" repl from last week's coding assignment and work on the practice exercises below the \"Stretch Goal on Algorithms Below\" header in the code.",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c64a9"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "# Get ready for git!\n\nThis week you'll be learning about git version control, and you'll start using a cloud-based git repository program called GitHub to complete your coding assignments.  There are several programs developers use as they build, test, and deploy/publish their code.  While you're welcome to use any tools/combination of tools you prefer, we recommend using [Visual Studio Code](https://code.visualstudio.com/).  Visual Studio Code is an IDE (Integrated Development Environment).  IDEs are helpful programs that combine several tools (a text editor, the command line/terminal, file organization, and more) into one program.  If you aren't currently using an IDE of your own preference, you should watch the video below and install Visual Studio Code and suggested extensions in the video before you start this week's assignment.\n\n[Visual Studio Code Info Session with Shawn Clary](https://www.youtube.com/watch?v=R8lusLkuWJQ)\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there also.\n\n- **[The Odin Project – Text Editors](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/text-editors)**\n- **[The Odin Project – Command Line Basics](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/command-line-basics-web-development-101)**\n- **[The Odin Project – Setting Up Git](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/setting-up-git)**\n- **[The Odin Project – Introduction to Git](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/introduction-to-git)**\n- **[The Odin Project – Git Basics](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/git-basics)**\n\n\n\n***",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a7"
        },
        {
          "subsectionOrder": 2,
          "title": "_**STRETCH GOAL (OPTIONAL): Intro to Algorithms**_",
          "content": "- **[Scrimba](https://v2.scrimba.com/javascript-interview-challenges-c02c/~00) - JavaScript Interview Challenges**\n- Watch and practice the first 5 videos (with solutions). Try to solve each algorithm before you watch the solution. The more you practice the more comfortable you will you get, which is good preparation for job interviewing.\n\n### Algorithms\n\nThink about it: you've been low-key using algorithms since your elementary school days. Yep, those step-by-step instructions for multiplying numbers? Bingo, those are algorithms!\n\nNow, let's break it down a bit. An **algorithm** is like a super precise recipe for solving a computer puzzle. Simple, right? But wait, what's a **computational problem**? Well, it's basically a riddle that a computer can help us solve. For example, think about sorting a jumbled mess of numbers into a neat little order. That's a computational problem.\n\nSo, when we talk about problems, we're talking about spelling them out really clearly. That means telling the computer exactly what it's working with – the stuff going in, what's supposed to come out, and how they're all connected. This is similar to using AI as well. You have to write a very detailed prompt when communicating with AI or you may get missing or incorrect information back.\n\nAn algorithm is like a secret recipe that lays out a series of steps. If you stick to those steps exactly as they're written, voilà, you'll solve the problem! It's like having multiple paths to victory in a game – as long as you follow the rules, you'll win!\n\n1. Read this [article](https://www.theodinproject.com/lessons/javascript-a-very-brief-intro-to-cs) on Odin. \n2. Read this [article](https://www.geeksforgeeks.org/introduction-to-algorithms/).  We won’t be getting into the types of algorithms but it’s a good overview of how algorithms are part of a developer’s daily life. \n3. Once again, same info, but [a video](https://www.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/v/what-are-algorithms) from Khan Academy.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64a8"
        }
      ]
    },
    {
      "id": "68f7ef51d68ee1a7419c64ab",
      "lessonNumber": 6,
      "title": "## Getting Deeper into Git",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 6",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "You have been working hard this class.  Now it's time to have a little fun!  Since you started learning about git version control last week, and learned a bit more about it this week, we want you to download and play the \"Oh My Git!\" game.  To start, follow <a href=\"https://blinry.itch.io/oh-my-git\" target=\"_blank\">this link</a> to the game download instructions.  \n\nPlease read the \"Play on ___?\" information for your operating system as you may need to do a little extra work to get the game running after you've downloaded it.  Once you've read that information, in the Download section below it, click the red Download button for the operating system you use.  \n\nIf downloading isn't working out for you, or you just want a different game to play with this week to practice using git, check this <a href=\"https://learngitbranching.js.org/?locale=en_US\" target=\"_blank\">Learn Git Branching</a> site out!\n\nThere is no coding assignment to work on or turn in this week so please enter \"no code this week\" in the 'URL' field of your assignment submission form and use the 'Questions' field to share your thoughts on either or both of these games!\n\n**REMINDER**\n\nIf you are completing work on the Algorithms Stretch Goal this lesson, you should go to your \"Lesson 5 - STRETCH GOAL (OPTIONAL): Intro to Algorithms\" of your Lesson Materials and work on the Scrimba - JavaScript Interview Challenges linked in that section.",
            "codeExample": "",
            "_id": "68f7ef51d68ee1a7419c64af"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Getting Deeper into Git",
          "content": "Read through the first two links which help explain git branching and merges, the workflow you'll be using throughout class.  Then watch the video which helps demonstrate that workflow from the context of team development (multiple people working on the same code base).  Finally, take a look at the Coursera course with \"Module 4 - Collaboration\" being your primary focus.  You do not need to complete the full course, but you're welcome to look at it at your convenience throughout the remainder of the class. \n\n* [Atlassian - using branches](https://www.atlassian.com/git/tutorials/using-branches)\n* [Atlassian - git merge](https://www.atlassian.com/git/tutorials/using-branches/git-merge)\n\n[YouTube video](https://www.youtube.com/watch?v=Q1kHG842HoI)\n\n_**You’ll need to click the link above or click the link where the video would be displayed to redirect to YouTube to watch the video.  The creator has disabled embedding on their video.**_  \n\n#### <ins>UPDATE to curriculum as of 8/15/25:</ins>\n\nOriginally we also suggested the following Coursera course:\n* [Coursera: git - GitHub introduction](https://www.coursera.org/learn/introduction-git-github) (a free full course on it that covers a lot more)\n\n**HOWEVER** this Coursera lesson can only be accessed with a free 7-day trial.  You would have to provide a credit card number **_and remember to cancel your free trial before the end of the 7 days in order to not be charged._**  If you think you would be able to afford and would want to take other Coursera courses, feel free to use this tool.\n\n**ALTERNATIVELY**\nThese documents and videos are directly from git and GitHub on how to understand and use git version control and GitHub.  Please refer to these to assist in your learning about git and GitHub this week:\n\n * [Reference manual and Introduction Videos - sourced from git documentation](https://git-scm.com/doc)\n * [git Basics - sourced from GitHub documentation](https://docs.github.com/en/get-started/git-basics)\n * [Using git - sourced from GitHub documentation](https://docs.github.com/en/get-started/using-git)\n \n\n***",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64ac"
        },
        {
          "subsectionOrder": 2,
          "title": "If you did not start/opt to work on last week's stretch goal of learning about Algorithms, you can start look into this week!  If you did start (or even finish it!) feel free to continue practicing with algorithms after your deeper look at git this week.  Here is the content from last week's lesson copied to this week's lesson so you do not have to switch back and forth:",
          "content": "## _**STRETCH GOAL (OPTIONAL): Intro to Algorithms**_\n- **[Scrimba](https://v2.scrimba.com/javascript-interview-challenges-c02c/~00) - JavaScript Interview Challenges**\n- Watch and practice the first 5 videos (with solutions). Try to solve each algorithm before you watch the solution. The more you practice the more comfortable you will you get, which is good preparation for job interviewing.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64ad"
        },
        {
          "subsectionOrder": 3,
          "title": "Algorithms",
          "content": "Think about it: you've been low-key using algorithms since your elementary school days. Yep, those step-by-step instructions for multiplying numbers? Bingo, those are algorithms!\n\nNow, let's break it down a bit. An **algorithm** is like a super precise recipe for solving a computer puzzle. Simple, right? But wait, what's a **computational problem**? Well, it's basically a riddle that a computer can help us solve. For example, think about sorting a jumbled mess of numbers into a neat little order. That's a computational problem.\n\nSo, when we talk about problems, we're talking about spelling them out really clearly. That means telling the computer exactly what it's working with – the stuff going in, what's supposed to come out, and how they're all connected. This is similar to using AI as well. You have to write a very detailed prompt when communicating with AI or you may get missing or incorrect information back.\n\nAn algorithm is like a secret recipe that lays out a series of steps. If you stick to those steps exactly as they're written, voilà, you'll solve the problem! It's like having multiple paths to victory in a game – as long as you follow the rules, you'll win!\n\n1. Read this [article](https://www.theodinproject.com/lessons/javascript-a-very-brief-intro-to-cs) on Odin. \n2. Read this [article](https://www.geeksforgeeks.org/introduction-to-algorithms/).  We won’t be getting into the types of algorithms but it’s a good overview of how algorithms are part of a developer’s daily life. \n3. Once again, same info, but [a video](https://www.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/v/what-are-algorithms) from Khan Academy.\n\n_**You can always search for algorithm problem practice and/or keep working with and practicing the Interview Challenges from Scrimba at the top of this section.  If you didn't complete the practice exercises at the bottom of your Lesson 4 replit you can revisit those too!**_",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef51d68ee1a7419c64ae"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64b1",
      "lessonNumber": 7,
      "title": "## The Odin Project Links:",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 7",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Get organized and write some code!\n   - [ ] In your GitHub repository, if you have not yet merged your pull request from two weeks ago, merge your open lesson-5 pull request by going to the \"Pull Requests\" tab of your repository.  Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge.  This will update your main branch with the work you did on your lesson-5 branch.\n   - [ ] Open your code editor and, in the terminal, make sure you're on your main branch.  If you're still on your lesson-5 branch, you can switch to your main branch by using the git command `git checkout main`.  \n   - [ ] Update your local main branch to include your lesson-5 work by pulling your changes from your GitHub repository main.  Use the following git command in your terminal to do this: `git pull origin main`.  Doing this copies the lesson-5 work you merged to main and pulls it to your local machine so now all your branches should be identical on your local machine.\n   - [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-7` in the terminal.  \n\n### Assignment: Task List / Deliverables\nOpen your index.html file.  Add \"boilerplate\" HTML code as a starting point that includes all the required elements and meta tags.  While copy and pasting is common practice, this week we want you to write all the boilerplate code from scratch so you understand the parts of it and what their functions are.  Each line of the boilerplate HTML code is broken down below.  REMINDER: HTML uses code called \"tags\" and \"elements\". In HTML, an element consists of a \"start tag\", some content, and an \"end tag\".  So when describing the <title> element, for example, we're referring to this: `<title>Your Title</title>` Also, keep in mind some HTML elements are \"self-closing\", meaning that they have one tag that opens and closes at the same time (e.g. `<meta name=\"description\" content=\"Your description\" />`. In the Body and Additional Elements sections of these instructions you'll find the bulk of the actual site content (what the user will see when they view your page) listed.\n\n#### HTML Boilerplate\n\n##### Doctype\nFirst let's define what type of document the browser will be reading.\n   - [ ] Define the document type at the top of the file by typing in `<!DOCTYPE html>` on line 1.\n\n##### Head Element\nThe \"head\" of an HTML document contains all the page's meta information, such as title and description.  This information helps with web searches and displays the page title in the browser tab.\n   - [ ] Before your name, but after the `<html>` opening tag, insert a `<head>` element.\n   - [ ] Inside the <head> element, add a <title> element to title your webpage (ex. Maria Santiago's Portfolio)\n   - [ ] Below your <title> element, add additional <meta> elements (at least two) from the meta elements you've learned about and/or find at this resource: [W3Schools HTML Head](https://www.w3schools.com/html/html_head.asp))\n\n##### Body Element\nThe \"body\" of an HTML document contains all the page's visible content.\n   - [ ] After the closing </head> tag, begin the body of your page by adding the opening `<body>` element. \n   - [ ] Close the body of your page by adding the closing `</body>` element right before the closing `</html>` tag\n   - [ ] Make sure all of the following content is inside the `<body>` tags, in this order:\n     - [ ] Your name in an `h1` element\n     - [ ] The word 'About' in an `h2` element\n     - [ ] A paragraph about you in a `p` element\n     - [ ] The word 'Experience' in an `h2` element\n     - [ ] Your listed experiences in a `ul` element, with each individual item in a `li` element.  Experiences can be courses you've taken, coding/tech languages you've learned, technologies you've worked with, or other experiences that highlight your value.\n     - [ ] The word 'Connect' in an `h2` element\n     - [ ] Your social media links in `a` elements, and you can also wrap them in `ul` and `li` tags if you wish.  Include at least two, your GitHub and LinkedIn profiles.  You can include more (Facebook, YouTube, Instagram, WhatsApp, TikTok, Discord, X, etc.) if you like.\n\n#### Additional Elements\nHTML describes the structure of a webpage using various semantic elements, such as: headings, paragraphs, lists, and more, as you just saw by writing content for the body of your page.  Now let's organize that content...\n   - [ ] Wrap each of the About, Experience, and Connect sections in a `<section>` element.  You'll use this later when you style your webpage to stay organized and apply different style settings to each of the different settings.\n   - [ ] Give each of these sections an \"id\" property with the same name as the section.  Example:  The About section would look like this:\n\n``` jsx\n<section id=\"About\">\n   <h2>About</h2>\n      <p>This is a paragraph about me.  Here's more info about me.</p>\n</section>\n```\n   - [ ] STRETCH GOAL (optional):  Feel free to use even more HTML elements by adding images, navigation menus, etc.\n\n**_By the end of these instructions, your index.html page should have boilerplate code that allows your web browser to identify what kind of document it's displaying and the meta data about your page (ex. title, keywords, etc.). You should have your Name, and three sections: (1) an About header with a paragraph about yourself, (2) an Experience header with a list of your experiences, and (3) a Connect header with at least two links.  All of this should be written in HTML in your index.html file._**\n\n### Backup to the cloud\nOnce you've made the above changes to your html file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment.  Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n   - [ ] Check the status of the changes you just made (editing the index.html file) by running `git status` in your terminal\n   - [ ] Stage all your changes for commit by running `git add .` in your terminal\n   - [ ] Run `git status` again to see how things have changed.  You should get a response indicating changes staged for commit.\n   - [ ] Create a commit message for reference.  You can use a different message if you wish.  Run `git commit -m \"boilerplate and content added\"`\n   - [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n   - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-7 has a recent push\" notice with a green \"Compare & pull request\" button.  Click that button\n   - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n   - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/name-classname/pull/2`) and paste it into your assignment submission form.\n\n### What next?\n   - If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n   - If you're behind or are working ahead:  \n     - if you're confident your work is accurate, merge your pull request and continue working through class.\n     - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64b7"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "Remember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there also.\n\n**Note:** The Scrimba course does not cover as much detail as the Odin Project on these topics so only those video lessons as a review of the basics of HTML.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64b2"
        },
        {
          "subsectionOrder": 2,
          "title": "The Odin Project Links:",
          "content": "- **[The Odin Project – How Does the Web Work?](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/how-does-the-web-work)**\n- **[The Odin Project – Introduction to HTML and CSS](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/introduction-to-html-and-css)**\n- **[The Odin Project – Elements and Tags](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/elements-and-tags)**\n- **[The Odin Project – HTML Boilerplate](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/html-boilerplate)**\n- **[The Odin Project – Working with Text](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/working-with-text)**\n- **[The Odin Project – Lists](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/lists)**\n- **[The Odin Project – Links and Images](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/links-and-images)**\n- **[The Odin Project - Forms](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-form-basics)**\n- **[The Odin Project - Semantic HTML](https://www.theodinproject.com/lessons/node-path-advanced-html-and-css-semantic-html)**\n- **[The Odin Project - Introduction to Accessibility](https://www.theodinproject.com/lessons/node-path-advanced-html-and-css-introduction-to-web-accessibility)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64b3"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Links:",
          "content": "**[Scrimba - HTML & CSS Crash Course](https://scrimba.com/html-css-crash-course-c02l)**\n- Complete the following sections of the above course:\n  - **Let’s write some HTML!**\n  - **strong and emphasis**\n  - **File naming and organization**\n  - **Anchors and Attributes**\n  - **Lists**\n  - **Images**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64b4"
        },
        {
          "subsectionOrder": 4,
          "title": "HTML",
          "content": "*Hypertext Markup Language (created in 1989)*, commonly called *HTML*, is a programming language that is used to create the structure of a web page. The basic idea of HTML is that the brackets < > surrounding the code of a web page tell the web browser what information it's working with.\n\nAt its core, hypertext is digital text that can link to other places, such as one website connecting to another. HTML, a markup language, uses tags like **`<head>`** and **`<body>`** to structure web content in a way that browsers can display. Unlike technical programming code, HTML uses human-readable words, making it user-friendly for web content creation.\n\nHTML is the foundational component of a website adding these elements to a web page:\n\n- Text: Words and written content\n- Media: Images, videos, and other visual or auditory elements\n- Links: Clickable paths to other places, like other websites\n- Containers: Elements that are used to give web pages structure for layout purposes",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64b5"
        },
        {
          "subsectionOrder": 5,
          "title": "Tags vs Elements",
          "content": "An HTML element is often made up of two **_tags_**: an _opening tag_ and a _closing tag_ (sometimes called a _begin tag_ and an _end tag_, respectively). The opening tag begins the HTML element, and it's enclosed in brackets <>.\n\nAn HTML **_element_** consists of two tags: an opening tag and a closing tag (such as `<h1>` and `</h1>`). The closing tag will always have a /, which signifies the end of an element. HTML text can be grouped into headings or paragraphs.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64b6"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64b9",
      "lessonNumber": 8,
      "title": "## The Odin Project Links:",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 8",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Get organized and write some code!\n   - [ ] In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-7 pull request by going to the \"Pull Requests\" tab of your repository. Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-7 branch.\n   - [ ] Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-7 branch, you can switch to your main branch by using the git command `git checkout main`.\n   - [ ] Update your local main branch to include your lesson-7 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`\n   - [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-8` in the terminal. Doing this also copies the lesson-7 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.\n\n### Assignment: Task List / Deliverables\n#### Create and Load Stylesheet\n   - [ ] Create a **_folder_** called `css` at the same level as your README.md and index.html files\n   - [ ] Inside that folder, create a Cascading Style Sheets (CSS) file called `index.css`\n   - [ ] Open your `index.html` file\n   - [ ] Before the closing `</head>` tag, insert a `<link>` element with a `rel` attribute of \"stylesheet\" and an `href` attribute that specifies the relative path to your CSS file (i.e. `css/index.css`)\n\n#### Write CSS\nFor this assignment, there are some general requirements but the design is up to you! This is your chance to be creative and transform your webpage into a reflection of who you are.  We suggest starting small with background colors, font choices, etc.  Make small changes, confirm they are what you expect, then move on to make another small change.  **TIP:** If you're struggling with visualizing sections of your webpage, put colorful borders around each section so you can see how changing your css code changes a given section.\n   - [ ] Change the background color of the page body\n   - [ ] Change the default text color\n   - [ ] Customize the font family\n     - [ ] STRETCH GOAL (optional):load in a font family from [Google Fonts](https://fonts.google.com/)\n   - [ ] Add spacing (padding/margin) between sections\n   - [ ] Change the alignment of the content of one of your sections\n   - [ ] Change the font size, weight, and color of headings\n   - [ ] Transform the style of your Name at the top of the page\n     - [ ] STRETCH GOAL (optional): add a picture of yourself to HTML and/or CSS (remember to include accessibility aspects if you add any images!)\n   - [ ] Transform the \"Experience\" list items into styled blocks\n   - [ ] Transform the style of the \"Connect\" links\n     - [ ] STRETCH GOAL (optional): make or use social media icons to replace your link text with images\n\n**NOTE:** This is the basic rubric, but we encourage you to think beyond this list and come up with your own ideas to make your webpage unique!\n\n**_By the end of this assignment, you should have basic styling and have changed a minimum of one background color, one font, one text color, the padding and margin of one element, the alignment of one element, the look of the heading elements, the look of your name, the look of list items, the look of links._**\n\n### Backup to the cloud\nOnce you've made the above changes to your repository folder structure and added your css file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n   - [ ] Check the status of the changes you just made (adding and editing the index.css file and the css folder) by running `git status` in your terminal\n   - [ ] Stage all your changes for commit by running `git add .` in your terminal\n   - [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n   - [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"styling added\"`\n   - [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n   - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-8 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n   - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n   - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/name-classname/pull/3`) and paste it into your assignment submission form.\n\n### What next?\n   - If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n   - If you're behind or are working ahead:\n     - if you're confident your work is accurate, merge your pull request and continue working through class.\n     - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64be"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64ba"
        },
        {
          "subsectionOrder": 2,
          "title": "The Odin Project Links:",
          "content": "- **[The Odin Project – Intro to CSS](https://www.theodinproject.com/lessons/foundations-intro-to-css)**\n- **[The Odin Project - The Cascade](https://www.theodinproject.com/lessons/foundations-the-cascade)**\n- **[The Odin Project - Inspect HTML and CSS](https://www.theodinproject.com/lessons/foundations-inspecting-html-and-css)**\n- **[The Odin Project – The Box Model](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/the-box-model)**\n- **[The Odin Project – Block and Inline](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/block-and-inline)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64bb"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Links:",
          "content": "**[Scrimba - HTML & CSS Crash Course](https://scrimba.com/html-css-crash-course-c02l)**\n- Complete the following sections of the above Course:\n  - **Intro to CSS**\n  - **CSS Basics**\n  - **Internal CSS**\n  - **External CSS**\n  - **Classes and IDs**\n  - **Intro to the Box Model**\n  - **Margin and Padding**\n  - **Borders**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64bc"
        },
        {
          "subsectionOrder": 4,
          "title": "CSS",
          "content": "*Cascading Style Sheets*, or CSS, is a programming language that was created to supplement HTML. As a *style sheet language*, CSS is the code that explains how a markup language, like HTML, should be presented. When used alongside HTML on a web page, CSS can add a variety of formatting, design, and style details.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64bd"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64c0",
      "lessonNumber": 9,
      "title": "## The Odin Project Links:",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 9",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Get organized to write some code!\n   - [ ] In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-8 pull request by going to the \"Pull Requests\" tab of your repository. Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-8 branch.\n   - [ ] Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-8 branch, you can switch to your main branch by using the git command `git checkout main`.\n   - [ ] Update your local main branch to include your lesson-9 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`\n   - [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-9` in the terminal. Doing this also copies the lesson-8 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.\n  \n### Assignment: Task List / Deliverables\nLast week you worked with styling.  This week lets work a little more with formatting and layout (the placement of your elements and their content).\n   - [ ] In your index.html file, add a navigational header to your webpage using the `<nav>` element.\n   - [ ] Add two sections to your index.html file:\n     - [ ] The first section will be \"Skills\".  Use an h2 tag as you did with your About, Experience, and Connect sections, and be sure to include the id property in the element.  You can leave the section empty for now.  In later weeks we'll use JavaScript to insert a list of your skills.\n     - [ ] The second section will be \"Projects\".  Use an h2 tag as you did with your About, Experience, and Connect sections, and be sure to include the id property in the element.  You need to add an empty `<ul>` element in this section; you will be adding your GitHub Projects via API call to this empty section using JavaScript later in this course.  \n   - [ ] The navigation menu should include a link to each of your sections (i.e. \"About\", \"Experience\", \"Skills\", \"Projects\", \"Connect\")\n     - [ ] STRETCH GOAL (Optional) Make the header sticky/fixed on the page using code in your index.css file.\n   - [ ] In your index.css file, change the layout of your \"Experience\" section using rows and columns so items are displayed in a better layout rather than a list\n         Hint: use Flexbox - we suggest have job titles to the left, dates worked that job to the right and brief description of the job below the title.\n   - [ ] Also in your index.css file, update the \"Connect\" section to use Flexbox to improve the layout of your social media icons or links\n**NOTE:** This is the basic rubric, but we encourage you to think beyond this list and come up with your own ideas to make your webpage unique!\n\n**_By the end of this lesson, you should have added navigation to your site that uses internal links to \"jump\" the user to that section of your page.  You should also have reformatted your Experience and Connect sections using Flexbox css code.  Lastly, your site should have a header for your Skills and Projects sections, and an empty `<ul>` element in the Projects section, but no content in either section yet._**\n\n### Backup to the cloud\nOnce you've made the above changes to your css file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n   - [ ] Check the status of the changes you just made (editing the index.css file) by running `git status` in your terminal\n   - [ ] Stage all your changes for commit by running `git add .` in your terminal\n   - [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n   - [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"formatted styles added\"`\n   - [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n   - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-9 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n   - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n   - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/name-classname/pull/4`) and paste it into your assignment submission form.\n\n### What next?\n   - If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n   - If you're behind or are working ahead:\n     - if you're confident your work is accurate, merge your pull request and continue working through class.\n     - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64c6"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c1"
        },
        {
          "subsectionOrder": 2,
          "title": "The Odin Project Links:",
          "content": "- **[The Odin Project - More CSS Properties](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-more-css-properties)**\n- **[The Odin Project - Positioning](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-positioning)**\n- **[The Odin Project – Introduction to Flexbox](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/introduction-to-flexbox)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c2"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Links:",
          "content": "**[Scrimba - HTML & CSS Crash Course](https://scrimba.com/html-css-crash-course-c02l)**\n- Complete the following sections of the above course:\n  - **A basic layout**\n  - **A basic layout - centering an element on the page**\n  - **Creating columns with flexbox**\n  - **Creating the layout from scratch - the HTML**\n  - **Creating the layout - The CSS**\n- Once you've complete the above, also complete this course: \n  - **[Scrimba - Learn Flexbox](https://scrimba.com/learn-flexbox-c0k)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c3"
        },
        {
          "subsectionOrder": 4,
          "title": "ADDITIONAL RESOURCES:",
          "content": "It's been a while since we gave you a fun game! Check out [Flexbox Froggy](https://flexboxfroggy.com/) for a fun way to practice writing your CSS flexbox model code",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c4"
        },
        {
          "subsectionOrder": 5,
          "title": "STRETCH GOAL (optional):",
          "content": "- **[CSS Grid Model guide](https://css-tricks.com/snippets/css/complete-guide-grid/)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c5"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64c8",
      "lessonNumber": 10,
      "title": "## The Odin Project Links:",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 10",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Get organized and write some code!\n - [ ] In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-9 pull request by going to the \"Pull Requests\" tab of your repository. \n - [ ] Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-9 branch.\n - [ ] Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-9 branch, you can switch to your main branch by using the git command `git checkout main`.\n - [ ] Update your local main branch to include your lesson-9 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`\n - [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-10` in the terminal. Doing this also copies the lesson-9 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.\n\n### Assignment: Task List / Deliverables\nYour site is probably looking good on your browser, but as you learned the majority of users use a mobile device or tablet to view sites.  Let's make your site look good on every device!\n**TIP:** When working with sizing, it's best to use percentages, REMs and EMs.. you can read more about those [here](https://www.linkedin.com/pulse/pixels-vs-em-rem-percent-when-why-use-each-milan-savov).  \n - [ ] Open your index.css file\n - [ ] Determine if you'd like to build your site mobile-first or desktop-first (meaning the code you have in there right now will be the default code for a phone or a desktop/laptop monitor)\n - [ ] Add comment notation to help keep yourself organized and make it easier to find your desktop/tablet/mobile style code sections\n - [ ] Based on if you decided to design mobile-first or desktop first, add your media queries for the other two device types.  Example: if you're designing mobile-first, you'll want to add a media query that handles devices that are tablet sized, and a media query that handles anything larger than the largest tablet size.\n - [ ] Make a minimum of two changes to at least three elements for each of your media queries.  Example: In your tablet media query, change the font size (1st change) and color (2nd change) of your headers (1st element), change the padding or margin (1st change) and background color (2nd change) of your unordered lists (2nd element), and change the font size (1st change) and font style (2nd change) of your name at the top of your page (3rd element)\n\n - [ ] STRETCH GOAL: Since we learned about grid layout this week, reformat one or both of your two flexbox sections (Experience or Connect) to be a grid layout instead to give yourself practice using grid.\n\nThe above are just suggestions/examples.  As in the past two lessons, we encourage you to make your site an expression of yourself!  Just keep in mind accessibility, because your awesomeness needs to be visible to everyone!  \n\n**_By the end of this lesson you should have at least two media queries defined in your index.css file and those media queries should be changing a minimum of two style properties across at least three of your html elements._**\n\n### Backup to the cloud\nOnce you've made the above changes to your css file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n - [ ] Check the status of the changes you just made (editing the index.css file) by running `git status` in your terminal\n - [ ] Stage all your changes for commit by running `git add .` in your terminal\n - [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n - [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m “responsiveness added\"`\n - [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.  \n - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-10 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/name-classname/pull/5`) and paste it into your assignment submission form.\n\n### What next?\n- If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n- If you're behind or are working ahead:\n  - if you're confident your work is accurate, merge your pull request and continue working through class.\n  - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64cd"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64c9"
        },
        {
          "subsectionOrder": 2,
          "title": "The Odin Project Links:",
          "content": "- **[The Odin Project - Responsive Design](https://www.theodinproject.com/lessons/node-path-advanced-html-and-css-introduction-to-responsive-design)**\n- **[The Odin Project - Natural Responsiveness](https://www.theodinproject.com/lessons/node-path-advanced-html-and-css-natural-responsiveness)**\n- **[The Odin Project - Responsive Images](https://www.theodinproject.com/lessons/node-path-advanced-html-and-css-responsive-images)**\n- **[The Odin Project – Media Queries](https://www.theodinproject.com/lessons/advanced-html-and-css-media-queries)**\n- **[The Odin Project - Introduction to Grid](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-introduction-to-grid)**\n- **[The Odin Project - Creating a Grid](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-creating-a-grid)**\n- **[The Odin Project - Positioning Grid Elements](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-positioning-grid-elements)**\n- **[The Odin Project - Advanced Grid Properties](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-advanced-grid-properties)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64ca"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Links:",
          "content": "- **[Scrimba - Learn Responsive Web Design](https://scrimba.com/learn-responsive-web-design-c029)** - NOTE: Begin with the \"Starting to think responsively\" lesson since the fundamentals videos cover things you've learned in previous weeks.\n- **[Scrimba - Learn CSS Grid](https://scrimba.com/learn-css-grid-c02k)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64cb"
        },
        {
          "subsectionOrder": 4,
          "title": "ADDITIONAL RESOURCES (same as the stretch goal last week):",
          "content": "- **[CSS Grid Model guide](https://css-tricks.com/snippets/css/complete-guide-grid/)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64cc"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64cf",
      "lessonNumber": 11,
      "title": "## The Odin Project Links:",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 11",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Get organized and write some code!\n- [ ] In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-10 pull request by going to the \"Pull Requests\" tab of your repository. Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-10 branch.\n- [ ] Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-10 branch, you can switch to your main branch by using the git command `git checkout main`.\n- [ ] Update your local main branch to include your lesson-10 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`\n- [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-11` in the terminal. Doing this also copies the lesson-10 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.\n\n### Assignment: Task List / Deliverables\n\n#### Create a JavaScript file\n- [ ] Create a folder called `js` at the same level as your index.html, readme.md, and your css folder.\n- [ ] Inside the js folder, create a JavaScript file called `index.js`\n- [ ] Open your `index.html` file\n- [ ] Before the closing `</body>` tag, insert a `<script>` element with a `src` attribute that specifies the relative path to your JavaScript file (i.e. `js/index.js`)\n- [ ] Save and open the index.html in your browser so you can check your changes to your html page as you build the js code below.  _If you're using VSCode or similar, you should be able to install/may already have an extension that allows you to have a \"live\" version of your index.html running in your browser that will automatically update when changes in your files are saved so you don't have to keep refreshing your file in your browser._\n\n#### Add a Footer Element\n- [ ] In your index.js file, using DOM manipulation, add a 'footer' child element to your index.html.  Be careful on this step, as different DOM methods (append, appendChild, lastChild, etc.) have different placements.\n- [ ] Remember that you can store the elements in variables to reference the variables and call methods on them to more easily follow your code. (It's easier to read `body.innerHTML` than it is to read `document.getElementsByTagName(\"body\").innerHTML`)\n\n#### Insert Copyright Text in Footer\n- [ ] Open your `index.js` file\n- [ ] Create a variable named `today` and assign it a new date object\n  - hint: `new Date()` constructor\n- [ ] Create a variable named `thisYear` and assign it the current year from your date object. Use a method to do this, don't hardcode \"2024\" because next year your website will have the wrong year! \n  - hint: `getFullYear` method\n- [ ] Create a variable named `footer` and assign it the footer element by using \"DOM Selection\" to select the `<footer>` element from the DOM\n  - hint: `querySelector` method or similar\n- [ ] Create a variable named `copyright` and use it to create a new paragraph (`p`) element\n  - hint: `createElement` method\n- [ ] Set the inner HTML of your `copyright` element to display your name and the current year\n  - hint: use the `copyright` variable and the `thisYear` variable from earlier\n- [ ] Append the `copyright` element to the footer using \"DOM Manipulation\"\n  - hint: `appendChild` method or similar\n- [ ] STRETCH GOAL: Use unicode to also include the copyright symbol ( &copy; ) in your footer content\n- [ ] Save and refresh your browser\n  - You should see the text \"_Your Name_ 2024\" at the bottom of the page\n\n#### Add to your Skills Section\n- [ ] Open your `index.html` file\n- [ ] Above the \"Connect\" section, add a new `<section>` element with an `id` attribute of value \"skills\"\n- [ ] Inside the new section, add a `<h2>` element that says \"Skills\"\n- [ ] After the `<h2>` element, add an empty unordered list (`<ul>`) element\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n  - You should see the new \"Skills\" heading\n\n#### Create List of Skills\n- [ ] Open your `index.js` file\n- [ ] List your technical skills by creating an Array of String values and store it in a variable named `skills`\n  - Example: `[\"JavaScript\", \"HTML\", \"CSS\", \"Adobe Photoshop\", \"GitHub\"]`\n- [ ] Create a variable named `skillsSection` and use \"DOM Selection\" to select the skills section by id\n  - hint: `querySelector` or `getElementById` method\n- [ ] Create a variable named `skillsList` and use \"DOM Selection\" to query the `skillsSection` (instead of the entire `document`) to select the `<ul>` element you created earlier in this assignment\n- [ ] Create a `for` loop to iterate over your `skills` Array\n- [ ] Inside the loop, create a variable named `skill` to create a new list item (`li`) element\n  - hint: `createElement` method\n- [ ] Still inside the loop, use the `skill` variable to set the inner text to the current Array element\n  - hint: access the Array element using bracket notation\n- [ ] The last thing we'll do inside the loop is append the `skill` element to the `skillsList` element\n  - hint: `appendChild` method\n- Save and refresh your browser _(or just check your browser for changes if using live extension)_\n  - You should see your list of skills beneath the \"Skills\" heading\n \n#### Style your skills\n - [ ] Open your `index.css` file\n - [ ] Use flexbox or grid to organize and adjust the layout of your list of skills.  Remember to include any adjustments in your media query sections.\n\n**_By the end of this assignment, you should have a js folder with an index.js in it.  The code you wrote in your index.js should have written a footer with your name and the current year to the html document.  Also, an array list of skills in your index.js file should be written to the skills section you created in your html document and should be styled using flexbox or grid._**\n\n### Backup to the cloud\nOnce you've made the above changes to your html file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n\n- [ ] Check the status of the changes you just made (creating a js folder and the index.js file within, linking the index.js to your html file) by running git status in your terminal\n- [ ] Stage all your changes for commit by running `git add .` in your terminal\n- [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n- [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"js added, created footer and skills\"`\n- [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n\n- [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-11 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n- [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n- [ ] Copy the address of your pull request page (should look like https://github.com/yourUsername/name-classname/pull/6) and paste it into your assignment submission form.\n\n### What next?\n- If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n- If you're behind or are working ahead:\n  - if you're confident your work is accurate, merge your pull request and continue working through class.\n  - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64d3"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "You can either use the written Odin Project lessons or the video lessons in Scrimba.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d0"
        },
        {
          "subsectionOrder": 2,
          "title": "The Odin Project Links:",
          "content": "- **[The Odin Project – DOM Manipulation and Events](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/dom-manipulation-and-events)**\n- **[The Odin Project - Form Basics](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-form-basics)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d1"
        },
        {
          "subsectionOrder": 3,
          "title": "Scrimba Links:",
          "content": "**[Scrimba - JavaScript Deep Dive](https://scrimba.com/javascript-deep-dive-c0a)**\n- Complete the following subsections found in the DOM section of the above course:\n  - **DOM > Module Intro: DOM**\n  - **DOM > What is the DOM?**\n  - **DOM > Get Single and Multiple Elements**\n  - **DOM > Creating and Modifying HTML Elements**\n  - **DOM > Dynamically Add CSS Styles**\n  - **DOM > Understand and Work with Events**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d2"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64d5",
      "lessonNumber": 12,
      "title": "# Synchronous vs. Asynchronous code",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 12",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "You were learning about asynchronous programming and promises this week. In our coding assignment though, we'll be building on our HTML and JavaScript skills by creating a form on our HTML page and use the JavaScript file to collect the information from the form and write it back to the HTML document.\n\n### Get organized and write some code!\n- [ ] In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-11 pull request by going to the \"Pull Requests\" tab of your repository. Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-11 branch.\n- [ ] Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-11 branch, you can switch to your main branch by using the git command `git checkout main`.\n- [ ] Update your local main branch to include your lesson-11 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`\n- [ ] Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-12` in the terminal. Doing this also copies the lesson-11 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.\n\n### Assignment: Task List / Deliverables\n\n#### Create a Message Form\n- [ ] Open your `index.html` file\n- [ ] Above the `<footer>` element, add an empty `<section>` element\n- [ ] Inside the new `<section>` element, create a level-two heading that says \"Leave a Message\"\n- [ ] After the heading, create an HTML `<form>` element with a `name` attribute that equals \"leave_message\"\n- [ ] Inside the `<form>` element, add the following:\n  1. `<input>` element with attributes: `type` \"text\", `name` \"usersName\", and `required` true\n  2. `<input>` element with attributes: `type` \"email\", `name` \"usersEmail\", and `required` true\n  3. `<textarea>` element with attributes: `name` \"usersMessage\" and `required` true\n  4. `<button>` element that says \"Submit\" and has `type` attribute equal to \"submit\"\n  5. Each form field should also have a corresponding `<label>` element\n  6. (Optional) Use `<br>` elements to stack the form fields\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n- [ ] Add navigation to the message form:\n  - [ ] Add a link in your `<nav>` section that takes the user to the 'Leave a Message' section when clicked\n\n#### Add Message List Section\n- [ ] After the `<section>` element from the previous step, create a new `<section>` element with an `id` of \"messages\"\n- [ ] Inside that element, create a level-two heading that says \"Messages\"\n- [ ] After the heading, add an empty unordered list (`<ul>`) element\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n\n#### Handle Message Form Submit\n- [ ] Open your `index.js` file and start at the bottom\n- [ ] Create a variable named `messageForm` that uses \"DOM Selection\" to select the \"leave_message\" form by `name` attribute\n- [ ] Add an event listener to the `messageForm` element that handles the \"submit\" event\n  - hint: `addEventListener` method\n- [ ] Inside the callback function for your event listener, create three new variables (one for each of the three form fields) and retrieve the value from the event\n  - hint: `event.target` is the form, `event.target.usersName` is the first input element\n- [ ] Inside the callback function for your event listener, add a `console.log` statement to log the three variables you created in the previous step\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n- [ ] Open the console in your browser if you haven't already by either right clicking on your page and select \"Inspect\" or by using the menu bar to open the Developer tools. \n - [ ] Fill out the HTML form in your browser and hit \"Submit\"\n\n> Note: at this point, you should notice that the browser is refreshing automatically when you submit your form which is **_not_** the desired behavior\n\n- [ ] Inside the callback function, above the other code you just wrote, add a new line to prevent the default refreshing behavior of the \"submit\" event\n  - hint: `preventDefault` method\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n- [ ] Fill out the HTML form in your browser and hit \"Submit\"\n  - You should see that the page **does not** refresh and your values are logged in the console\n\n> Note: at this point, you should notice that the form is submitting properly but the form fields are not reset after submit\n\n- [ ] Inside the callback function, on the very last line, add a new line of code to clear the form\n  - hint: `reset` method\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n\n#### Display Messages in List\n- [ ] In the `index.js` file, start inside the event listener callback function on the line **above** where you reset the form\n- [ ] Create a variable named `messageSection` and use \"DOM Selection\" to select the #messages section by `id`\n- [ ] Create a variable named `messageList` and use \"DOM Selection\" to query the `messageSection` (instead of the entire `document`) to find the `<ul>` element\n- [ ] Create a variable named `newMessage` that makes a new list item (`li`) element\n- [ ] On the next line, set the inner HTML of your `newMessage` element with the following information:\n  - `<a>` element that displays the \"usersName\" and is a clickable link to the \"usersEmail\" (hint: use the `mailto:` prefix)\n  - `<span>` element that displays the \"usersMessage\"\n- [ ] Create a variable named `removeButton` that makes a new `<button>` element\n  - Set the inner text to \"remove\"\n  - Set the `type` attribute to \"button\"\n  - Add an event listener to the `removeButton` element that handles the \"click\" event\n    - Inside the callback function, create a variable named `entry` that finds the button's parent element using DOM Traversal (hint: `parentNode` property)\n    - Remove the `entry` element from the DOM (hint: `remove` method)\n- [ ] Append the `removeButton` to the `newMessage` element\n  - hint: `appendChild` method\n- [ ] Append the `newMessage` to the `messageList` element\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n\n#### Style your Message Form\n - [ ] Open your `index.css` file\n - [ ] Style your message form fields and buttons keeping in mind:\n   - [ ] adequate specing so form fields aren't crowded\n   - [ ] appropriate sizing in media queries so a user on a mobile device can easily touch/tap into the fields to type\n   - [ ] button sizing to accomodate click and touch/tap interactions\n\n#### Stretch Goals\nThese tasks are **entirely optional**, but if you'd like a challenge then do your best to complete each item.\n- [ ] (Optional) Hide the #messages section, including the Messages header, when the list is empty\n- [ ] (Optional) Create an \"edit\" button for each message entry that allows the user to input a new/modified message\n\n**_By the end of this assignment, you should have a form in your HTML document with name, email, message fields and a submit button as well as a messages section.  The code you wrote in your index.js should handle the inputs the user enters into the form and display that information as a name you can click on to email the user and their message with a remove button to remove their message entirely.  You should have styling in your index.css file for your message form fields and/or section.  If you attempted stretch goals, you should also have a hidden Messages section unless there is a message and/or each message should have an edit button._**\n\n### Backup to the cloud\nOnce you've made the above changes to your html file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n\n- [ ] Check the status of the changes you just made (code changes to the index.html and index.js files) by running git status in your terminal\n- [ ] Stage all your changes for commit by running `git add .` in your terminal\n- [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n- [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"form and functionality added\"`\n- [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n\n- [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-12 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n- [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n- [ ] Copy the address of your pull request page (should look like https://github.com/yourUsername/name-classname/pull/7) and paste it into your assignment submission form.\n\n### What next?\n- If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n- If you're behind or are working ahead:\n  - if you're confident your work is accurate, merge your pull request and continue working through class.\n  - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64d9"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "Go through **both** resources (Odin **and** Scrimba) for this topic as they will help you gain a more clear understanding of this topic.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.\n\n- **[The Odin Project – Asynchronous Code](https://www.theodinproject.com/lessons/node-path-javascript-asynchronous-code)**\n- **[Scrimba - JavaScript Deep Dive](https://scrimba.com/javascript-deep-dive-c0a)**\n  - Go to the Async JavaScript section and complete only the Fix Callback Hell with Promises subsection\n- **[Scrimba - Introduction to ES6+](https://scrimba.com/introduction-to-es6-c0t)**\n  - Scroll about 2/3rds down the list of sections in the ES6+ Course and complete the following sections:\n    - Promises\n    - Challenge: Promises",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d6"
        },
        {
          "subsectionOrder": 2,
          "title": "Synchronous vs. Asynchronous code",
          "content": "*Synchronous code* executes one code instruction at a time, in the order that the instructions are given. *Asynchronous code* executes multiple instructions simultaneously, and the order in which the instructions are completed isn't known. \n\nWith asynchronous code, multiple tasks can be executed at the same time while tasks in the background finish. This is what we call *non-blocking* code. The execution of other code won't stop while an asynchronous task finishes its work.\n\n```jsx\nlet greet_one = \"Hello\"\nlet greet_two = \"World!!!\"\nconsole.log(greet_one)\nsetTimeout(function(){\n    console.log(\"Asynchronous\");\n}, 10000)\nconsole.log(greet_two);\n```\n\nIn the above example, if you run the code on your machine you will see `greet_one` and `greet_two` logged even if there is code in between those 2 logs.\n\nNow, setTimeout is asynchronous so it runs in the background, allowing code after it to execute while it runs. After 10 seconds, `Asynchronous` will print because we set a time of 10 seconds in setTimeout to execute it after 10 seconds.\n\n1. Read this article about [synchronous and asynchronous](https://www.telerik.com/blogs/how-javascript-code-gets-executed-synchronous-asynchronous)\n\n[Watch this video on Async vs Sync](https://www.youtube.com/watch?v=wYRw8f-wrco&t=253s)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d7"
        },
        {
          "subsectionOrder": 3,
          "title": "Promises",
          "content": "When it comes to handling asynchronous code, the go-to tool is something called a **promise**. This nifty object can handle async tasks and gives you a bunch of methods to neatly pluck out a single result.\n\nHere's the deal: Asynchronous code can be a bit of a puzzle because it messes with the usual order of things. It can get pretty tricky in some situations.\n\nBut that's where promises come to the rescue! They're like a protective wrapper around async code. Promises are smart – they won't trigger the callback function until it's absolutely necessary. Plus, they hand you some nifty functions to deal with whatever outcome your async code delivers, whether it's a triumphant success or a less-than-ideal failure.\n\n```jsx\nconst newPromise = new Promise((resolve, reject) => {\n  // Your code here...\n});\n```\n\nA new promise can be created using the **new** keyword with the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) class. This will create an instance of a promise. Promises can be assigned to variables. The only argument to pass into the Promise constructor is a callback function that has two parameters: **resolve** and **reject.**\n\nTo manage asynchronous code, promises have **three states:**\n\n- **Pending:** When a promise is first created, it has a status of *pending*.\n- **Fulfilled:** When the promise has successfully finished running, it has a status of *fulfilled*. This means that it is ready to pass back a value.\n- **Rejected:** If something goes wrong, the promise changes to a status of *rejected*. This means that something failed.\n\n### Resolving Promises\n\nNow that you've got the hang of creating promises, you might have noticed something missing – a way to snoop on a promise's mood, like whether it's feeling \"pending,\" \"fulfilled,\" or \"rejected.\" There's also no direct way to peek at what the promise has decided to resolve to or why it's throwing a fit.\n\nUnlike your typical JavaScript objects, promises are like chameleons. They can switch between their states (and values) from pending to fulfilled or rejected whenever they please. This means you've got to keep an eye on them.\n\nSo, here's the deal: Promises rely on callback functions to raise a flag when their state changes. \n\nWhen the promise is all smiles and gets resolved, it'll call the callback function hanging out in the **`then()`** method and share its resolved value. But if it's having a bad day and gets rejected, the **`catch()`** method swoops in, bringing along the rejected reason (aka, the error). \n\nIt's like a promise's way of saying, \"Hey, something happened, and here's what went down!\"\n\n### The then() method\n\nWhen a promise is created, the asynchronous operation inside will be fulfilled as quickly as possible. However, there are no methods or properties available to directly access the resolved value of a promise.\n\nThe then() method accepts a callback function that is called whenever the promise is fulfilled. \n\n```jsx\n// Creating a Promise\nconst myPromise = new Promise((resolve, reject) => {\n  // Simulating an asynchronous task \n  setTimeout(() => {\n    const data = \"Here's the result!\";\n    resolve(data); // Resolving the promise with some data\n  }, 2000); // Simulating a 2-second delay\n});\n\n// Using the Promise\nmyPromise.then((result) => {\n  console.log(\"Promise resolved with data:\", result);\n}).catch((error) => {\n  console.error(\"Something went wrong:\", error);\n});\n```\n\n1. We create a **`myPromise`** object using the **`Promise`** constructor. Inside the promise, we simulate an asynchronous task using **`setTimeout`**. After 2 seconds, the promise is resolved with the message \"Here's the result!\"\n2. We use the **`then`** method to handle the resolution of the promise. When the promise is resolved, the provided callback function is executed, and it logs the resolved data.\n3. If an error were to occur inside the promise (e.g., if we used **`reject`** instead of **`resolve`**), the **`catch`** method would handle the error and log it.\n\n### **The catch() method**\n\nThe **`catch()`** method in JavaScript is like the safety net for promises. Just like how try/catch blocks work, if the **`catch()`** method doesn't throw an error itself, the function calling it won't know that something went wrong. In simple terms, the promise attached to **`catch()`** only becomes rejected if **`catch()`** encounters an error or returns a promise that also gets rejected. Otherwise, it resolves as if everything went smoothly.\n\n![promise catch flow](https://storage.googleapis.com/ctd-course-bucket/courses/68f7ef47d68ee1a7419c646d/images/a3a940b8-8795-4ee8-a8d9-a05a62fc1908.png)\n\n1. Read [this article about Promises](https://javascript.info/promise-basics)\n2. Read [this second article about Promises](https://dmitripavlutin.com/what-is-javascript-promise/)\n\nWatch these two short videos on JavaScript Promises:\n\n1. [JS Promise in 100 Seconds](https://www.youtube.com/watch?v=RvYYCGs45L4)\n2. [Async JS: Promises](https://www.youtube.com/watch?v=slIJj-zbs_M)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64d8"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64db",
      "lessonNumber": 13,
      "title": "## The fetch API",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 13",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "This week you'll have two parts to your coding assignment.  The first completes your work with your portfolio site by using API fetch to pull a list of all your GitHub repositories to your portfolio page.  The second part is an open API project to reinforce what you learn this week with fetch, and to give you another project for your portfolio.  \n\n## Portfolio completion\n\n<details>\n<summary> Click here to expand your Portfolio completion assignment instructions </summary>\n<br>\n<h3>Get organized and write some code!</h3>\n<ul>\n<li>In your GitHub repository, if you have not yet merged your pull request from last week, merge your open lesson-12 pull request by going to the \"Pull Requests\" tab of your repository. Click on your open pull request, then click on the green 'Merge Pull Request\" and confirm the merge. This will update your main branch with the work you did on your lesson-12 branch.</li>\n<li>Open your code editor and, in the terminal, make sure you're on your main branch. If you're still on your lesson-12 branch, you can switch to your main branch by using the git command `git checkout main`.</li>\n<li>Update your local main branch to include your lesson-12 work by pulling your changes from your GitHub repository main. Use the following git command in your terminal to do this: `git pull origin main`</li>\n<li>Still in your terminal, create a new local branch to keep track of just the work you'll do for this assignment by running `git checkout -b lesson-13` in the terminal. Doing this also copies the lesson-12 work you merged to main and pulled to your local machine so now all your branches should be identical on your local machine.</li>\n</ul>\n\n### Assignment: Task List / Deliverables\n\n#### Creating your fetch\n- [ ] Open your `index.js` file, starting below the code from the previous lesson\n- [ ] Using the Fetch API, create a \"GET\" request to `https://api.github.com/users/{GITHUB_USERNAME}/repos` where `{GITHUB_USERNAME}` is your username for your GitHub account\n  - hint: the `fetch` function\n  - hint: \"GET\" is the default method for `fetch`\n- [ ] Chain a `then` method to your `fetch` call and pass it a function that returns the response JSON data\n\n#### Handle your JSON data\n- [ ] Chain another `then` method and pass it a callback function to parse the response and store it in a variable named `repositories`\n  - hint: JSON.parse(this.response)\n- [ ] Console.log the value of repositories to better see the data returned from your API fetch\n- [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n  - You should see the list of your GitHub repositories displayed in your console.\n\n#### Handling errors\n - [ ] Chain a `catch()` function to your `fetch` call to handle errors from the server so the user would know what happened if your Projects section was empty.\n\n#### Display Repositories in List\n - [ ] Create a variable names `projectSection`; using \"DOM Selection\" to select the projects section by id\n - [ ] Create a variable named `projectList`; using \"DOM Selection\" query the projectSection (instead of the entire document) to select the <ul> element\n - [ ] Create a for loop to iterate over your repositories Array, starting at index 0\n   - [ ] Inside the loop, create a variable named `project` to make a new list item (li) element\n     - hint: createElement method\n   - [ ] On the next line, set the inner text of your project variable to the current Array element's name property\n     - hint: access the Array element using bracket notation\n   - [ ] On the next line, append the project element to the projectList element\n     - hint: appendChild method\n - [ ] Save and refresh your browser _(or just check your browser for changes if using live extension)_\n   - You should see your list of repositories beneath the \"Projects\" heading on your portfolio site\n      \n#### Style your Repository List\n - [ ] Open your `index.css` file\n - [ ] Add styling to your projects list, be sure to account for any changes you want in media queries\n - [ ] STRETCH GOAL: Use flexbox (or grid) to style your list of repositories\n\n**_By the end of this assignment, you should have a working API fetch to your GitHub account and be able to see a list of your repository names in the Projects section of your portfolio.  Were there to be a server error during the API fetch, your site would return an error message.  Your project list should be styled using flexbos or grid._**\n</details>\n\n## Open API Project begins\n\n<details>\n<summary> Click here to expand your Open API Project assignment instructions </summary>\n<br>\nAn \"open source\" means that the source code of something is freely available and can be redistributed and modified.  We have identified several options of open source APIs that allow you to use their data without paying for access to that data.  Use one of the following open source APIs to create a site that accesses a minimum of 2 data points. (Example: if using Open-Meteo, the weather API, you could display (1) the temperature and (2) the weather condition).  Take a look at the options below and decide which one(s) interest you the most.\n**NOTE:** You have from now until the end of class to have your Open API Project meeting the requirements.  Think about what you want to build and how you want your site to look and then break the work into parts to pace yourself.\n\n### Open Source API options:\n \n* [Open-Meteo](https://open-meteo.com/) – a weather API\n* [Swapi.Tech](https://www.swapi.tech/) – an API about Star Wars films\n* [Marvel](https://developer.marvel.com/) – an API about the Marvel fandom\n* [ARTIC](https://api.artic.edu/docs/#introduction) – an art API from the Art Institute of Chicago\n* [TheDogAPI](https://thedogapi.com/) or the [TheCatAPI](https://thecatapi.com/) – APIs about (you guessed it!) Dogs or Cats\n* [Soccer](https://api-sports.io/documentation/football/v3) - for all the Soccer lovers out there\n* DEPRECATED, certificate expired - [SampleAPIs](https://sampleapis.com/api-list/coffee) – an API for coffee lovers\n\nThis week, just focus on accomplishing the following:\n - [ ] Familiarize yourself with the documentation of whichever API you decide to use\n - [ ] Create a new repository in GitHub specifically for your open API project and connect it to your local machine (you can look back at lesson 7 coding assignment instructions to refresh your memory if needed)\n\n⚠️ **_NOTE:_** Be sure you are NOT in your portfolio folder when you clone your repository! Doing this will create a sub-repository which is a complicated problem to resolve. ⚠️ \n\n - [ ] Create your basics (index.html, index.js, index.css) but don't go too in depth with any of them yet; just be sure your pages link correctly to each other\n - [ ] Repeat the portfolio part of the assignment above for this project to be sure that your fetch is working and that you're getting a response.  You don't need to display any of it yet, but you should at least be able to console.log the response so you can see what data you get back.  \n - [ ] Put a link to your Open API project repository in the readme.md file of your Portfolio project so your reviewer can easily find/look at your Open API project from your portfolio project.  You can add a link to your read me by using the following syntax:\n`[My Open API Project](https://github.com/yourUsernameHere/yourname-open-api)` Put the words you want the link to be in hard brackets `[ ]` and the link to the repository in parentheses `( )` \n\n**_By the end of this assignment, you should have started on your Open API Project (create a repository, built your basics, and wrote the code for your API fetch to test what response you get back.  You should also see your Open API Project listed on your portfolio by the end of this part of the assignment._**\n</details>\n\n### Backup to the cloud\nOnce you've made the above changes to your index.js file, follow the below instructions to push a copy from your local machine like you did at the end of last assignment. You'll do this same process with your open API project to get any local work on that project backed up to your GitHub repository.  Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n\n- [ ] Check the status of the changes you just made (code changes to the index.js files) by running git status in your terminal\n- [ ] Stage all your changes for commit by running `git add .` in your terminal\n- [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n- [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"API fetch completed\"`\n- [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n\n- [ ] Go to your GitHub repository page in your web browser now, and you should see a \"lesson-13 has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n- [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n- [ ] Copy the address of your pull request page (should look like https://github.com/yourUsername/name-classname/pull/8) and paste it into your assignment submission form.  **_NOTE: If you'd like your reviewer to check your open API project work in progress, submit the link in the \"questions\" field of your assignment submission form._**\n\n### What next?\n- If you're on track with class, wait to get feedback and/or the email notice that your assignment review is complete before confirming and merging your pull request to the main branch.\n- If you're behind or are working ahead:\n  - if you're confident your work is accurate, merge your pull request and continue working through class.\n  - if you're not sure about your work this week, schedule a 1:1 session with a mentor and review your work together before merging.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64df"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "Go through **both** resources (Odin **and** Scrimba) for this topic as they will help you gain a more clear understanding of this topic.\n\nRemember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.\n\n- **[The Odin Project – JSON](https://www.theodinproject.com/lessons/node-path-javascript-json)**\n- **[The Odin Project – Working with APIs](https://www.theodinproject.com/lessons/node-path-javascript-working-with-apis)**\n- **[The Odin Project - Async and Await](https://www.theodinproject.com/lessons/node-path-javascript-async-and-await)**\n- **[Scrimba - JS Deep Dive](https://scrimba.com/javascript-deep-dive-c0a)**\n  - Go to the Async JavaScript section and complete the following subsections:\n    - Make Network Requests with fetch()\n    - Challenge: Fetch API\n    - Dead-Simple Promises with async-await\n    - Catch Errors with async-await\n- **[Scrimba - Introduction to ES6+](https://scrimba.com/introduction-to-es6-c0t)**\n  - Scroll to almost the bottom of the above course and complete the section called Async & Await",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64dc"
        },
        {
          "subsectionOrder": 2,
          "title": "The fetch API",
          "content": "At a high level, `fetch` is used to make HTTP requests on the browser. It uses `Promise`s to handle the asynchronous nature of HTTP requests and responses. `fetch` is used to formulate and send a request to a server and read the server response.\n\nSince the `fetch` API is provided by almost all major browsers, you can use the `fetch` API by opening up the \"Console\" tab in Chrome or Firefox to use the built-in `fetch` function.\n\n`fetch` is a function that can only be used in the browser's JavaScript runtime environment. Currently, it is not a built-in function on Node.js, the runtime environment you are using in VSCode.\n\n```jsx\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Request failed');\n    }\n    return response.json(); // Parse the response as JSON\n  })\n  .then(data => {\n    console.log(data); // Do something with the data\n  })\n  .catch(error => {\n    console.error('An error occurred:', error);\n  });\n```\n\n`fetch` has two parameters, url and options. The first parameter is required it defines the URL of the request that you want to send. If the URL is the only argument passed into the `fetch` function then a GET request will be made. \n\nThe second parameter is optional it defines the other components of the request besides the URL:\n\n- method - the method of the request (GET, POST, PUT, PATCH, DELETE)\n- headers - an object whose key-value pairs are header names and values\n- body - value should be a string of the body of the request\n\nThe `fetch` function returns a Promise that will be fulfilled when a response comes back from the server. The resolved value of the returned Promise is a [fetch Response object](https://developer.mozilla.org/en-US/docs/Web/API/Response) containing information about the response components.\n\nNow watch these two videos on Fetch:\n\n1. [Learn Fetch API in 6 minutes](https://www.youtube.com/watch?v=cuEtnrL9-H0&t=2s)\n2. [GET data from API & display in HTML with JS](https://www.youtube.com/watch?v=zUcc4vW-jsI)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64dd"
        },
        {
          "subsectionOrder": 3,
          "title": "The async and await keywords",
          "content": "The async keyword is applied to a function. On its own, the async keyword transforms the function so that when the function is invoked, the return value will be wrapped in a promise.\n\nThe async keyword works in tandem with the await keyword inside of your function body.\n\nThe await keyword allows you to treat asynchronous requests as if they were synchronous.\n\nUsing the await keyword before fetch() forces the execution of the code to pause until that asynchronous operation is finished. Once it is, you can then use the resolved response.\n\n```jsx\nasync function fetchData() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n    \n    if (!response.ok) {\n      throw new Error('Request failed');\n    }\n    \n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n}\n\nfetchData();\n```\n\nIn this example, we define an **`async`** function called **`fetchData`**. Inside the function, we use the **`await`** keyword to make a GET request to the JSONPlaceholder API to fetch the post with an ID of 1. We also handle any potential errors using a **`try...catch`** block.\n\nThe response is first checked for its status using **`response.ok`**. If the response is successful, we use **`await response.json()`** to parse the JSON data. Finally, we log the data to the console.\n\nNow watch these two videos on Async/Await:\n\n1. [The Async Await Episode](https://www.youtube.com/watch?v=vn3tm0quoqE&t=413s)\n2. [JS Async/Await Simply Explained](https://www.youtube.com/watch?v=wKY4-WMmbZw)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64de"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64e1",
      "lessonNumber": 14,
      "title": "## Node",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 14",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "This week your coding assignment has two parts again.  The first part is to continue your work on your Open API Project.  The second part is to work on debugging techniques.\n\n## Open API Project\n<details>\n<summary>Click here to see Open API Project Instructions</summary>\n<br>\nThis week, focus on accomplishing the following:\n\n - [ ] Start digging deeper on how you want to display content for either or both of the data points for your site. \n - [ ] Start getting some basic styling built\n - [ ] Build your second fetch for your second data point (or adjust your code so clicking your navigation link for your second data point will change/update your fetch accordingly.\n\n**_By the end of this assignment, you should have made additional progress on your Open API Project.  Since you have another assignment due this week, please submit your most recent pull request link in the \"questions\" field of your assignment submission form if you'd like your reviewer to check your work in progress._**\n</details>\n\n## Debugging Assignment\n<details>\n<summary>Click here to see Debugging Assignment Instructions</summary>\n<br>\n\n### Overview\n\nThe purpose of this assignment is to get you comfortable with reading already written code you're unfamiliar with, and let you practice debugging skills.  There are lots of helpful tools in programming that help alert you to something being \"not right\" in your code.  Before you start working through the Task List below, familiarize yourself with the code.  Try and walk through the code and add comments to help yourself understand what the code is doing currently.  You may even find and fix some bugs by looking through it first!  Then read through the Task List below and use developer tools to find and fix the bugs.  You may find it helpful to do your Mindset Assignment on debugging before starting this assignment.  Find and fix as many bugs as you can this week, and submit your work no matter how far you get with this assignment.  You'll have next week as well to continue working on finding and fixing the bugs/app.\n\n### Getting Started\n\n - [ ] Fork [this GitHub repository](https://github.com/Code-the-Dream-School/intro-to-programming-debugging) to make a copy of it to your GitHub account.  You can do this by clicking the \"Fork\" button in the top right.\n   - [ ] This opens a new page where you can retitle your copy of this repository to `yourname-debugging`\n - [ ] Once you've completed forking the repository, be sure you're looking at your copy (you should see your GitHub username in the top left, not Code-the-Dream-School). \n   - [ ] Click the green \"Code\" button, select \"SSH\" as the Local Clone type (not HTTPS or GitHub CLI), click the copy button (two overlapping squares icon) to copy your repository address. \n   - [ ] Your copied link should look like `git@github.com:yourUsernameHere/yourname-debugging.git` (EXAMPLE: a student named Maria Santiago would have this link `git@github.com:mariaDev/maria-santiago-debugging.git`)\n   - [ ] Clone this repository so that the code is available on your local machine.\n   **BE SURE YOU ARE NOT INSIDE YOUR LOCAL FOLDER FOR YOUR PORTFOLIO PROJECT WHEN YOU CLONE THIS REPOSITORY!**\n\n### Get organized and review the code\n - [ ] Before you change any code, make a new branch to make your changes on by using the command `git checkout -b debugging`\n - [ ] Look at the code in index.html and index.js and add any comments to help you identify what sections of code are doing what.\n - [ ] Play with/practice with the game to see how it's behaving and take note of how you would expect it to behave.\n\n### Task List:\n\nThe goal of this assignment is not to create a working application, but to practice debugging JavaScript using the browser developer tools. You should focus less on getting all the \"right\" answers and more on the process of troubleshooting each issue.\n\nThere are **at least 8 bugs** in this assignment, do your best to track down and fix as many as you can.\n\nBelow is a list of requirements explaining what the application should do:\n\n- [ ] No errors in the browser console\n\n> _**Note:** keep the console open as you play the game so that you can see the randomly generated \"target number\"_\n\n- [ ] At the start, the \"reset\" button and all of the \"messages\" should be hidden\n\n- [ ] You should be able to type a number into the input field and click \"Submit Guess\" to submit the form\n\n- [ ] When the form is submitted, you should see the following:\n\n  - [ ] A message displaying the number that was entered\n  - [ ] A message displaying how many tries you have left (starts at 5 and decrements by 1)\n  - [ ] A message describing the guess (too low, too high, etc.)\n  - [ ] A \"reset\" button that restarts the game\n\n- [ ] If the guessed number is BELOW the target, the message should say \"too low\"\n\n- [ ] If the guessed number is ABOVE the target, the message should say \"too high\"\n\n- [ ] If the guessed number is the SAME as the target, then:\n  - [ ] The input field and \"Submit Guess\" button should be disabled\n  - [ ] The message should say \"guessed correctly\"\n\n- [ ] If the guessed number is not the same AND all 5 tries have been used, then:\n  - [ ] The input field and \"Submit Guess\" button should be disabled\n  - [ ] The message should say \"0 guesses remaining\"\n\n- [ ] When you click the \"reset\" button, the form should return to its initial state (not disabled)\n\n### Stretch Goals:\n\nThese items are not necessarily bugs in the code, but rather, missing features that should exist to prevent unexpected behavior.\n\n(Optional) Complete the following:\n\n- [ ] You should not be able to submit a guessed number lower than 1\n\n- [ ] You should not be able to submit a guessed number higher than 99\n\n- [ ] If there is only one guess left, it should say \"guess\" (singular) instead of \"guesses\" (plural)\n</details>\n\n### Backup to the cloud\nOnce you've found as many bugs as you can (and changed the code to fix them) follow the below instructions to push a copy from your local machine like you did at the end of last assignment. Make sure your code gets copied to GitHub by adding changes to staging, committing the staged changes, and pushing them from your local machine to GitHub:\n\n - [ ] Check the status of the changes you made by running `git status` in your terminal\n - [ ] Stage all your changes for commit by running `git add .` in your terminal\n - [ ] Run `git status` again to see how things have changed. You should get a response indicating changes staged for commit.\n - [ ] Create a commit message for reference. You can use a different message if you wish. Run `git commit -m \"# bugs found and fixed\"`\n - [ ] Push these changes to your GitHub repository from your local computer by running `git push`\n\n### Submit Assignment\nNow let's make sure that lesson branch will be reviewed.\n\n - [ ] Go to your GitHub repository page in your web browser now, and you should see a \"debugging has a recent push\" notice with a green \"Compare & pull request\" button. Click that button\n - [ ] Feel free to put notes to yourself or notes for your reviewer in the description (be sure you're including any questions to your reviewer in your assignment submission form though!) and click the green \"Create pull request\" button.\n - [ ] Copy the address of your pull request page (should look like `https://github.com/yourUsername/intro-to-programming-debugging/pull/1`) and paste it into your assignment submission form. Remember to also submit your pull request to your work in progress for your Open API Project in the \"questions\" field of your form if you'd like your work looked at.\n\n### What next?\nIf you found all 8 bugs and completed all the optional stretch goals, congratulations!\nIf you did not find all bugs (or did but haven't attempted any stretch goals) continue work on this next week to try and find all 8 bugs at minimum.",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64e4"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "Remember to please go to each link in this list and read through the content on that page. If there are links you are redirected to as you read/work through the content, follow those links as well and read the content there too.\n\n- **[The Odin Project – What is Node?](https://www.theodinproject.com/lessons/nodejs-introduction-what-is-nodejs)**",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64e2"
        },
        {
          "subsectionOrder": 2,
          "title": "Node",
          "content": "JavaScript, created by Brendan Eich, was initially designed to spruce up static web pages. Unlike many other programming languages that are versatile for building various types of software, JavaScript was tailor-made specifically for the web. Back in the day, if you wanted to use JavaScript, you had to create a website first.\n\nNow, JavaScript has evolved significantly since its debut in the 1990s. It's become a full-fledged language, and you can even run it outside the confines of web browsers thanks to a nifty tool called Node.js, often just called Node. \n\nNode.js was cooked up by Ryan Dahl in 2009. With Node, you can run JavaScript projects on your computer and fine-tune your project's environment. It's like giving JavaScript more freedom to roam beyond just web pages.\n\nNow watch these videos on Node and NPM:\n\n1. [Node Explained in 2 minutes](https://www.youtube.com/watch?v=ATCs2BY-acA&t=77s)\n2. [NPM and why we need it](https://www.youtube.com/watch?v=P3aKRdUyr0s)\n3. [NPM package.json and npm init](https://www.youtube.com/watch?v=5cXf3XlZ4Zk&t=10s)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64e3"
        }
      ]
    },
    {
      "id": "68f7ef52d68ee1a7419c64e6",
      "lessonNumber": 15,
      "title": "Lesson 15",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 15",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "### Final Project Submission Details\n\nFinal week!  \n\nThis week you'll finish any work on your Portfolio and Open API projects.  Be sure you've merged any open pull requests to the main branches for both of your projects when your work is completed and before you submit.  When you submit your projects, you'll use your usual Assignment Submission process (the button at the bottom of your lesson page) and put your portfolio repository link in the \"Link to your Coding Assignment / Pull Request / Final Project Repository\" field.  \nIt should look like `https://github.com/yourUsername/yourRepositoryName`.  \nUse the \"Link to your SECOND Coding Assignment / Pull Request / Final Project Repository\" field to submit your Open API project.  \nIt should look like `https://github.com/yourUsername/yourOpenAPIProjectName`.  \nThe form will have new questions on it regarding what you would like to do next with our program.\n\nAs long as your final projects meet rubric requirements and you've taken/passed your assessment (which was emailed to you at the start of this lesson week) you will advance to the next course of your choosing.\n\n### Project Demo Details\n\nIt is good practice to talk about what you have learned and know about project as you will be asked to talk about your experiences in job interviews.  This is why we ask all students to give a short demo of their final projects.  This demo is NOT graded and your performance in the demo will have no bearing on your graduation.  Please record a 3-5 minute presentation that touches on all of the following:\n - [ ] Scroll the length of your portfolio to show your format and styling of your content\n - [ ] Demonstrate your form section by entering one or two user entries and showing if/how entries can be edited or deleted\n - [ ] Enter Inspector/Developer Mode to demonstrate how your portfolio looks on different device sizes\n - [ ] Scroll the length of your Open API project to show your format and styling of your content\n - [ ] Demonstrate your navigation to show that both required endpoints are displaying to the user\n - [ ] Enter Inspector/Developer Mode to demonstrate how your API project looks on different device sizes\n - [ ] Share what the most challenging part of either/both projects and what you enjoyed working on the most in either/both projects\n\nRubric details for the Portfolio Project and the Open API Project can be seen below.  Be sure both your projects meet the requirements specified for each.\n\n### How to record your presentation\nYou can record your presentation in any of these three ways: \n 1. Logging into your personal Zoom account and record your personal meeting where only you are in attendance and you are screensharing your work ([this is a link to a video on how to do this](https://www.youtube.com/watch?v=njwbjFYCbGU))\n 2. Use a screen recording program already on your machine\n    * [Mac users can use this link to watch a how-to video](https://www.youtube.com/watch?v=w9Byefp51tY)\n    * [Windows users can use this link to watch a how-to video](https://www.youtube.com/watch?v=PJB7pM5bvNI)\n 4. Use an online option such as loom ([link to a how to video on loom here](https://www.youtube.com/watch?v=oAdLPbfXcQo)).\n\n### How to upload your video so it can be shared\n<details>\n<summary>Click here to expand detailed instructions on how to upload your recording</summary>\n<br>\n<h4>1. Make sure you're logged in to youtube.</h4>\n <p>If you don't have a youtube account, <a href=\"https://support.google.com/youtube/answer/161805?hl=en&co=GENIE.Platform%3DDesktop\">create one by following these instructions</a>.</p>\n <p>You will know you're logged in if you have an initial/icon/other in the top right corner (where the M in the brown circle is on this screenshot):</p>\n \n ![User logged in to youtube account](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.20%E2%80%AFPM.png?raw=true)\n\n <h4>2. Click `+ Create` in the top right and select `Upload video`</h4>\n \n ![Create menu expanded](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.27%E2%80%AFPM.png?raw=true)\n\n <h4>3. In the Upload videos window that appears, click the black `Select files` button</h4>\n <p>You'll need to select the file of your recording you have saved on your computer.</p>\n \n ![Upload videos modal](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.35%E2%80%AFPM.png?raw=true)\n\n<h4>4. The fle title will be the default video title.  You can change this to include your name and \"Intro to Programming Final Project Presentation\"</h4>\n\n![Edit Video Details title](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.02.17%E2%80%AFPM.png?raw=true)\n\n<h4>5. Scroll down under the title; select \"No, it's not made for kids\" and click on the `Show more` gray button to make further setting changes</h4>\n\n![Adjust video settings](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.02.30%E2%80%AFPM.png?raw=true)\n\n<h4>6. You'll want to be sure the following options for some of the sections that appear after click `Show more` are set to the following:</h4>\n\n - [ ] Altered content: select \"No\" since you have not used AI to alter reality in your video\n \n - [ ] Recording date and location: please select the date you made your final project recording\n      \n - [ ] Shorts remixing: select \"Don't allow remixing\"\n       \n - [ ] Comments and ratings: if you would like classmates to leave comments, leave comments \"On\", otherwise you can turn them off by selecting \"Off\".  _NOTE: we do not and cannot monitor comments.  Please report anything concerning to Code the Dream but have screenshots if needed._  You can also UNcheck the \"Show how many viewers like this video if you wish.\n       \n - [ ] Click the black `Next` button in the bottom right to proceed from the Details section of the upload through the Video elements and Checks portion.\n       \n - [ ] Once you are on the Visibility section of the upload, select \"Unlisted\" as seen here\n\n![Select Unlisted](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.04.52%E2%80%AFPM.png?raw=true)\n\n - [ ] Lastly, click `Save` and copy your video link as seen here\n\n![Save and copy](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.05.09%E2%80%AFPM.png?raw=true)\n \n</details>\n\n### Submitting your recording\nOnce you have recorded your presentation, please use your regular Lesson Assignment Submission Form for this week (Lesson 15) to turn in your final projects and your recording. The parts of the form regarding the video are at the very bottom.  You will also indicating what class you'd like to take next.  Your final projects will be reviewed during the week following the official last day of class and you'll receive email(s) with results of that review and any next steps with our program. \n\nYou can view the gallery of your and your classmates' final project presentations here: [Luna Final Project Presentations](https://airtable.com/appoSRJMlXH9KvE6w/shrq95dhzEdxNRsvc)\n\n\n## Portfolio Project\n<details>\n<summary>Click here to expand the Portfolio Project rubric</summary>\n<br>\n<h3>General</h3>\n<ul>\n<li>Project is published on a public GitHub repository</li>\n<li>Code executes without errors in the browser</li>\n</ul>\n\n### Project Structure\n - [ ] README.md (_NOTE:_ this file is typically used to explain how someone can run your code, but it does not need to contain this content for your final project to be acceptable)\n - [ ] index.html\n - [ ] css folder\n   - [ ] index.css\n - [ ] js folder\n   - [ ] index.js \n - [ ] (OPTIONAL) images folder\n\n#### index.html\n - [ ] include proper boilerplate code\n - [ ] (OPTIONAL) use a font-family or Google fonts\n - [ ] index.css and index.js file should be properly linked to this file\n - [ ] level 1 heading with student's name\n - [ ] navigation with working internal links to the following sections:\n    - [ ] About\n    - [ ] Experience\n    - [ ] Skills\n    - [ ] Projects\n    - [ ] Leave a Message\n    - [ ] (OPTIONAL) Connect or Contact Me section to contain email and social media links\n - [ ] (OPTIONAL) sticky/fixed navigation that stays in place when user scrolls down on the page\n - [ ] (OPTIONAL) dark mode toggle switch to change coloring of background and text between default and dark mode\n - [ ] (OPTIONAL) navigation converted to a hamburger menu on smaller devices via media queries\n###### About Section\n - [ ] level 2 heading\n - [ ] one or more paragraphs of text\n - [ ] (OPTIONAL) your photo with alt attribute for accessibility \n###### Experience Section\n - [ ] level 2 heading\n - [ ] list of previous work or experience or one or paragraphs of related experiences if student has no previous work experience)\n - [ ] if listing experience, this should be styled in grid or flexbox layout\n###### Skills Section\n - [ ] level 2 heading\n - [ ] list of skills, inserted using JavaScript from the index.js file\n - [ ] list should be styled in a grid or flexbox layout\n###### Projects Section\n - [ ] level 2 heading\n - [ ] list of GitHub repositories, fetched using the GitHub API and inserted using JavaScript from the index.js file \n - [ ] (OPTIONAL) each GitHub repository name is a clickable link that takes the user to that repository\n - [ ] (OPTIONAL) display additional information about each of the repositories (examples: created date, description, etc.)\n - [ ] (OPTIONAL) customize the styling of your projects list (cards or use of flexbox or grid for examples)\n###### Leave a Message Section (Form and Messages List)\n - [ ] level 2 heading for form\n    - [ ] Name, Email Address, and Message fields\n    - [ ] Submit button\n    - [ ] event listener that adds the form field inputs to the messages section\n - [ ] level 2 heading for messages\n    - [ ] list of messages (once the form has been given inputs and submit button clicked) styled in a grid of flexbox layout\n      - [ ] Each message item should have the following:\n        - [ ] Name of message author as a clickable link to email the author at the email address they provided in the form\n        - [ ] Message text\n        - [ ] Remove button to delete the message from the list of messages\n        - [ ] (OPTIONAL) Edit button for user to change one (or more) of the form inputs (name, email, message)\n    - [ ] (OPTIONAL) conditionally render (meaning hide/display) the level 2 heading and section content depending on whether or not there are messages\n###### (OPTIONAL) Connect or Contact Me\n_NOTE:_ If you do not have a Connect or Contact Me section, your links should be in the footer of your page as icons/images\n - [ ] clickable link to email the student \n - [ ] at least two social media links to the student's profile pages (examples: GitHub, LinkedIn, twitter, instagram, etc.)\n - [ ] (OPTIONAL) use icons or images in place of text string links for your email and 2+ social media links\n###### Footer\n - [ ] Copyright logo, current year, and student's name inserted using JavaScript from the index.js file\n - [ ] Email and 2+ social media icon/image links (if the page does NOT have a Connect or Contact Me section)\n\n#### index.js\n - [ ] Comments in code as appropriate (to notate what sections of code are used for)\n - [ ] Sections of code to accomplish the following:\n   - [ ] Insert the copyright logo, current year, and student's name in the footer of index.html\n   - [ ] Using an array, insert the array items as a list of skills in the skills section of index.html\n   - [ ] Handle the event listener on the message form to insert the following into the messages section:\n     - [ ] convert form inputs into the author's name as a clickable link \n     - [ ] display their message and \n     - [ ] provide a remove button to delete the message\n     - [ ] (OPTIONAL) provide an edit button to change one or more form fields\n     - [ ] (OPTIONAL) conditionally render the messages header and section of index.html (show it if there are messages, hide it if none)\n   - [ ] Using API fetch, insert the names of your GitHub repositories in the projects section of index.html\n     - [ ] (OPTIONAL) provide additional information about each repository\n     - [ ] (OPTIONAL) make the repository names clickable links that redirect the user to that repository page\n\n#### index.css\n - [ ] (Optional) Comments in code as appropriate (to notate what sections of code are for)\n - [ ] At least two media queries\n   - [ ] In each media query there should be at least 2 property changes to at least 3 html elements\n - [ ] Flexbox (or Grid) used to format the layout of the Experience and Connect sections _(NOTE: If you are using social media icons in your footer in place of a Connect section, you should use Flexbox or Grid to format the layout of your icons in the footer)_\n\n#### (OPTIONAL) images folder\n - [ ] If you've elected to use images in your portfolio, be sure to have an images folder at the root level of your repository (same level as your index.html and README.md files).  All your images should go in this folder\n - [ ] Make sure images used in your html or css files are properly linked to the image inside your images folder\n - [ ] Remember to use alt for any images so there will be helper text if the image is not displayed properly\n\n#### Styling\nEveryone's style is different and we encourage students to let the style fo their site represent them.  That being said, there are some general style guidelines we encourage you to follow:\n - [ ] Remember to have appropriate contrast to your site (don't use a dark font on a dark background\n - [ ] You should not need to horizontally scroll to see your site content on any device (mobile, tablet, or desktop)\n - [ ] Watch out for font sizes on smaller devices.  The screen is smaller, but the font size should not be small also.  This is also true for form input fields/buttons, a user would need to tap on it with a finger to get focus on the input to type, don't make it too small that their device can't recognize what they're trying to tap on.\n</details>\n\n## Open API Project\n<details>\n<summary>Click here to expand the Open API Project rubric</summary>\n<br>\nUse one of the following open source APIs to create a site that accesses a minimum of 2 endpoints.  (Example: if using the weather app, you could display (1) the temperature and (2) the weather condition).  \n\n### Open Source API options:\n* [Open-Meteo](https://open-meteo.com/) – a weather API\n* [Swapi.Tech](https://www.swapi.tech/) – an API about Star Wars films\n* [Marvel](https://developer.marvel.com/) – an API about the Marvel fandom\n* [ARTIC](https://api.artic.edu/docs/#introduction) – an art API from the Art Institute of Chicago\n* [TheDogAPI](https://thedogapi.com/) or the [TheCatAPI](https://thecatapi.com/) – APIs about (you guessed it!) Dogs or Cats\n* [Soccer](https://api-sports.io/documentation/football/v3) - for all the Soccer lovers out there\n* DEPRECATED, certificate expired - [SampleAPIs](https://sampleapis.com/api-list/coffee) – an API for coffee lovers\n\nBe sure to satisfy the below requirements in your Open API Project:\n\n### STRUCTURE:\n - [ ] A public GitHub repository containing your project\n - [ ] An HTML document for the page\n - [ ] A CSS document to style the HTML page\n - [ ] A JavaScript file that retrieves data from one of several public API sources to display the data on your HTML page\n - [ ] A README file that includes the instructions for running the webpage (This does not need to be a live site; you can instruct the user to download and run locally)\n\n### CONTENT:\n - [ ] Display the data for at least 2 endpoints in the API\n - [ ] Include navigation from each endpoint’s page to the other (Example: if using the weather app, one navigation link should display the temperature details and the second navigation link should display the weather condition)\n - [ ] Issue new GET requests each time the user click a navigation link, meaning you should have 2 GET requests - one for each navigation, that requests only the needed information (Example: if using the weather app, clicking temperature navigation link should pull only data that allows user to see temperatures and clicking conditions navigation link should pull only data that allows user to see weather conditions)\n\n### FUNCTIONALITY:\n - [ ] Code runs without issues by following the instructions in the README file\n - [ ] Navigation between the different endpoints behaves properly and is not slowed down by requesting more data than needs to be displayed (this is the reason for the 2 separate GET requests)\n - [ ] Code is readable and well structured\n - [ ] If applicable, error cases are appropriately handled\n - [ ] Styling is effective (example: font-sizes are not too small or large, colors are not too dark/light to be easily seen, etc.)\n</details>",
            "codeExample": "",
            "_id": "68f7ef52d68ee1a7419c64e8"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Lesson 15",
          "content": "This is the final week of class.  Focus on any final touches you want to add to your portfolio site and your open API project.  As a reminder, the rubric details can be seen below in the Coding Assignment section.  Be sure both your projects meet the requirements specified for each.\n",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68f7ef52d68ee1a7419c64e7"
        }
      ]
    }
  ]
}